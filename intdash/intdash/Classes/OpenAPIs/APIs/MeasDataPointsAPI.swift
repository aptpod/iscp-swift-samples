//
// MeasDataPointsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MeasDataPointsAPI {

    /**
     Store Data Points
     
     - parameter body: (body) このエンドポイント使用時は、 &#x60;Content-Type&#x60; を以下にしてください。   * &#x60;application/protobuf&#x60;       * [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の &#x60;StoreProto&#x60; を参照してください。         * &#x60;DataPointProto&#x60; の &#x60;data_payload&#x60;は iSCP v1のデータフォーマットに従います。         * iSCPのデータフォーマットは [詳説 iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf#page&#x3D;23)を参照してください。 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDataPoints(body: URL? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        createDataPointsWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Store Data Points
     - POST /v1/measurements/data
     - データポイントを登録します。
     - parameter body: (body) このエンドポイント使用時は、 &#x60;Content-Type&#x60; を以下にしてください。   * &#x60;application/protobuf&#x60;       * [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の &#x60;StoreProto&#x60; を参照してください。         * &#x60;DataPointProto&#x60; の &#x60;data_payload&#x60;は iSCP v1のデータフォーマットに従います。         * iSCPのデータフォーマットは [詳説 iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf#page&#x3D;23)を参照してください。 (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func createDataPointsWithRequestBuilder(body: URL? = nil) -> RequestBuilder<URL> {
        let localVariablePath = "/v1/measurements/data"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Store Project Data Points
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter body: (body) このエンドポイント使用時は、 &#x60;Content-Type&#x60; を以下にしてください。   * &#x60;application/protobuf&#x60;       * [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の &#x60;StoreProto&#x60; を参照してください。         * &#x60;DataPointProto&#x60; の &#x60;data_payload&#x60;は iSCP v1のデータフォーマットに従います。         * iSCPのデータフォーマットは [詳説 iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf#page&#x3D;23)を参照してください。 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createProjectDataPoints(projectUuid: String, body: URL? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        createProjectDataPointsWithRequestBuilder(projectUuid: projectUuid, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Store Project Data Points
     - POST /v1/projects/{project_uuid}/measurements/data
     - データポイントを登録します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter body: (body) このエンドポイント使用時は、 &#x60;Content-Type&#x60; を以下にしてください。   * &#x60;application/protobuf&#x60;       * [protocol.proto](https://docs.intdash.jp/api/measurement/proto/index.html) の &#x60;StoreProto&#x60; を参照してください。         * &#x60;DataPointProto&#x60; の &#x60;data_payload&#x60;は iSCP v1のデータフォーマットに従います。         * iSCPのデータフォーマットは [詳説 iSCP 1.0](https://docs.intdash.jp/manual/iscp1-essentials/latest/ja/iscp1-essentials-ja.pdf#page&#x3D;23)を参照してください。 (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func createProjectDataPointsWithRequestBuilder(projectUuid: String, body: URL? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/data"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Edge's Data IDs
     
     - parameter start: (query) 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     - parameter end: (query) 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     - parameter edgeUuid: (query) エッジのUUID (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDataIDs(start: Int64? = nil, end: Int64? = nil, edgeUuid: String? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: DataIDs?, _ error: Error?) -> Void)) {
        listDataIDsWithRequestBuilder(start: start, end: end, edgeUuid: edgeUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Edge's Data IDs
     - GET /v1/getids
     - エッジを指定し、そのエッジから送信されているデータに含まれるデータ識別子（ `data_type` 、 `channel` 、 `data_id` の組み合わせ）のリストを取得します。
     - parameter start: (query) 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     - parameter end: (query) 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     - parameter edgeUuid: (query) エッジのUUID (optional)
     - returns: RequestBuilder<DataIDs> 
     */
    open class func listDataIDsWithRequestBuilder(start: Int64? = nil, end: Int64? = nil, edgeUuid: String? = nil) -> RequestBuilder<DataIDs> {
        let localVariablePath = "/v1/getids"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(),
            "end": end?.encodeToJSON(),
            "edge_uuid": edgeUuid?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataIDs>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Data IDs
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDataIDsWithMeasurementUUID(measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: DataIDs?, _ error: Error?) -> Void)) {
        listDataIDsWithMeasurementUUIDWithRequestBuilder(measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Data IDs
     - GET /v1/measurements/{measurement_uuid}/getids
     - 計測を指定し、その計測に含まれるデータ識別子（ `data_type` 、 `channel` 、 `data_id` の組み合わせ）のリストを取得します。
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<DataIDs> 
     */
    open class func listDataIDsWithMeasurementUUIDWithRequestBuilder(measurementUuid: String) -> RequestBuilder<DataIDs> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/getids"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataIDs>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Data Point Data IDs
     
     - parameter name: (query) どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 
     - parameter start: (query) 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter end: (query) 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDataPointDataIDs(name: String, start: String? = nil, end: String? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: DataPointDataIDs?, _ error: Error?) -> Void)) {
        listDataPointDataIDsWithRequestBuilder(name: name, start: start, end: end).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Data Point Data IDs
     - GET /v1/data_ids
     - データポイントのデータID（ `data_type`, `data_id` ）のリストを取得します。
     - parameter name: (query) どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 
     - parameter start: (query) 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter end: (query) 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - returns: RequestBuilder<DataPointDataIDs> 
     */
    open class func listDataPointDataIDsWithRequestBuilder(name: String, start: String? = nil, end: String? = nil) -> RequestBuilder<DataPointDataIDs> {
        let localVariablePath = "/v1/data_ids"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "end": end?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataPointDataIDs>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter order
     */
    public enum Order_listDataPoints: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter timeFormat
     */
    public enum TimeFormat_listDataPoints: String, CaseIterable {
        case ns = "ns"
        case us = "us"
        case ms = "ms"
        case s = "s"
        case rfc3339 = "rfc3339"
    }

    /**
     List Data Points
     
     - parameter name: (query) どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 
     - parameter start: (query) 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter end: (query) 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter idq: (query) 取得したいデータポイントの条件を以下のフォーマットで指定します。 &#x60;data_id&#x60; には、 &#x60;GET /data_ids&#x60; エンドポイントで取得できる &#x60;data_id&#x60; の値を使用します。  - &#x60;&lt;data_type&gt;:&lt;channel&gt;/&lt;data_id&gt;&#x60;  各セグメントにはワイルドカード(*)を使用することができます。 例:   - CAN(data_type &#x3D; &#x60;1&#x60;)のデータポイントを取得する -&gt; &#x60;1:*_/_*&#x60; または &#x60;1&#x60;   - チャンネル2のCANデータポイントを取得する -&gt; &#x60;1:2/_*&#x60; または &#x60;1:2&#x60;   - チャンネル2のCANデータポイントのうち、データIDが &#x60;00000001&#x60; のものを取得する -&gt; &#x60;1:2/00000001&#x60; (optional)
     - parameter since: (query) 指定した時刻以降に更新された計測のみを取得します。 以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z).   - UNIX時刻（マイクロ秒）(**Deprecated**). (optional)
     - parameter exitOnError: (query) &#x60;true&#x60; を指定した場合、取得中にエラーが発生すると処理を中断し、中断前までのデータポイントのリストを返します。 (optional, default to "false")
     - parameter label: (query) 信号定義のラベル (optional)
     - parameter period: (query) データポイントを指定した間隔（マイクロ秒）に間引きます。（ **Experimental** ）  指定された間隔ごとに最新のデータポイントを残し、それ以外を除去します。 また、指定された間隔になるようにデータポイントの時刻を揃えます。 &#x60;&#x60;&#x60;  --1--2----3---4--5---6-7--89-a---b-c---d--e--&gt; period指定なし  |     |     |     |     |     |     |     |  |     |     |     |     |     |     |     |  2-----3-----5-----7-----a-----c-----d-----e--&gt; period指定あり   |&lt;---&gt;| period &#x60;&#x60;&#x60; (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数。デフォルトは無制限。 (optional)
     - parameter order: (query) 並べ替えの順序。デフォルトは &#x60;asc&#x60; （昇順） (optional)
     - parameter timeFormat: (query) レスポンスの時刻表示形式。デフォルトは &#x60;us&#x60; （マイクロ秒） (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listDataPoints(name: String, start: String? = nil, end: String? = nil, idq: [String]? = nil, since: String? = nil, exitOnError: String? = nil, label: [String]? = nil, period: Int64? = nil, limit: Int64? = nil, order: Order_listDataPoints? = nil, timeFormat: TimeFormat_listDataPoints? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: DataPoint?, _ error: Error?) -> Void)) {
        listDataPointsWithRequestBuilder(name: name, start: start, end: end, idq: idq, since: since, exitOnError: exitOnError, label: label, period: period, limit: limit, order: order, timeFormat: timeFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Data Points
     - GET /v1/data
     - データポイントのリストを取得します。 返却されるデータポイントはJSON形式です。データポイントごとに改行で区切られます。
     - responseHeaders: [Transfer-Encoding(String)]
     - parameter name: (query) どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 
     - parameter start: (query) 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter end: (query) 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter idq: (query) 取得したいデータポイントの条件を以下のフォーマットで指定します。 &#x60;data_id&#x60; には、 &#x60;GET /data_ids&#x60; エンドポイントで取得できる &#x60;data_id&#x60; の値を使用します。  - &#x60;&lt;data_type&gt;:&lt;channel&gt;/&lt;data_id&gt;&#x60;  各セグメントにはワイルドカード(*)を使用することができます。 例:   - CAN(data_type &#x3D; &#x60;1&#x60;)のデータポイントを取得する -&gt; &#x60;1:*_/_*&#x60; または &#x60;1&#x60;   - チャンネル2のCANデータポイントを取得する -&gt; &#x60;1:2/_*&#x60; または &#x60;1:2&#x60;   - チャンネル2のCANデータポイントのうち、データIDが &#x60;00000001&#x60; のものを取得する -&gt; &#x60;1:2/00000001&#x60; (optional)
     - parameter since: (query) 指定した時刻以降に更新された計測のみを取得します。 以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z).   - UNIX時刻（マイクロ秒）(**Deprecated**). (optional)
     - parameter exitOnError: (query) &#x60;true&#x60; を指定した場合、取得中にエラーが発生すると処理を中断し、中断前までのデータポイントのリストを返します。 (optional, default to "false")
     - parameter label: (query) 信号定義のラベル (optional)
     - parameter period: (query) データポイントを指定した間隔（マイクロ秒）に間引きます。（ **Experimental** ）  指定された間隔ごとに最新のデータポイントを残し、それ以外を除去します。 また、指定された間隔になるようにデータポイントの時刻を揃えます。 &#x60;&#x60;&#x60;  --1--2----3---4--5---6-7--89-a---b-c---d--e--&gt; period指定なし  |     |     |     |     |     |     |     |  |     |     |     |     |     |     |     |  2-----3-----5-----7-----a-----c-----d-----e--&gt; period指定あり   |&lt;---&gt;| period &#x60;&#x60;&#x60; (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数。デフォルトは無制限。 (optional)
     - parameter order: (query) 並べ替えの順序。デフォルトは &#x60;asc&#x60; （昇順） (optional)
     - parameter timeFormat: (query) レスポンスの時刻表示形式。デフォルトは &#x60;us&#x60; （マイクロ秒） (optional)
     - returns: RequestBuilder<DataPoint> 
     */
    open class func listDataPointsWithRequestBuilder(name: String, start: String? = nil, end: String? = nil, idq: [String]? = nil, since: String? = nil, exitOnError: String? = nil, label: [String]? = nil, period: Int64? = nil, limit: Int64? = nil, order: Order_listDataPoints? = nil, timeFormat: TimeFormat_listDataPoints? = nil) -> RequestBuilder<DataPoint> {
        let localVariablePath = "/v1/data"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "end": end?.encodeToJSON(),
            "idq": idq?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "exit_on_error": exitOnError?.encodeToJSON(),
            "label": label?.encodeToJSON(),
            "period": period?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "order": order?.encodeToJSON(),
            "time_format": timeFormat?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataPoint>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Project Edge's Data IDs
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter start: (query) 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     - parameter end: (query) 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     - parameter edgeUuid: (query) エッジのUUID (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listProjectDataIDs(projectUuid: String, start: Int64? = nil, end: Int64? = nil, edgeUuid: String? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: DataIDs?, _ error: Error?) -> Void)) {
        listProjectDataIDsWithRequestBuilder(projectUuid: projectUuid, start: start, end: end, edgeUuid: edgeUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Project Edge's Data IDs
     - GET /v1/projects/{project_uuid}/getids
     - エッジを指定し、そのエッジから送信されているデータに含まれるデータ識別子（ `data_type` 、 `channel` 、 `data_id` の組み合わせ）のリストを取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter start: (query) 取得対象範囲の始点（マイクロ秒単位のUNIX時刻） (optional)
     - parameter end: (query) 取得対象範囲の終点（マイクロ秒単位のUNIX時刻） (optional)
     - parameter edgeUuid: (query) エッジのUUID (optional)
     - returns: RequestBuilder<DataIDs> 
     */
    open class func listProjectDataIDsWithRequestBuilder(projectUuid: String, start: Int64? = nil, end: Int64? = nil, edgeUuid: String? = nil) -> RequestBuilder<DataIDs> {
        var localVariablePath = "/v1/projects/{project_uuid}/getids"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "start": start?.encodeToJSON(),
            "end": end?.encodeToJSON(),
            "edge_uuid": edgeUuid?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataIDs>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Project Data IDs
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listProjectDataIDsWithMeasurementUUID(projectUuid: String, measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: DataIDs?, _ error: Error?) -> Void)) {
        listProjectDataIDsWithMeasurementUUIDWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Project Data IDs
     - GET /v1/projects/{project_uuid}/measurements/{measurement_uuid}/getids
     - 計測を指定し、その計測に含まれるデータ識別子（ `data_type` 、 `channel` 、 `data_id` の組み合わせ）のリストを取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<DataIDs> 
     */
    open class func listProjectDataIDsWithMeasurementUUIDWithRequestBuilder(projectUuid: String, measurementUuid: String) -> RequestBuilder<DataIDs> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/getids"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataIDs>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Project Data Point Data IDs
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter name: (query) どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 
     - parameter start: (query) 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter end: (query) 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listProjectDataPointDataIDs(projectUuid: String, name: String, start: String? = nil, end: String? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: DataPointDataIDs?, _ error: Error?) -> Void)) {
        listProjectDataPointDataIDsWithRequestBuilder(projectUuid: projectUuid, name: name, start: start, end: end).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Project Data Point Data IDs
     - GET /v1/projects/{project_uuid}/data_ids
     - データポイントのデータID（ `data_type`, `data_id` ）のリストを取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter name: (query) どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 
     - parameter start: (query) 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter end: (query) 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - returns: RequestBuilder<DataPointDataIDs> 
     */
    open class func listProjectDataPointDataIDsWithRequestBuilder(projectUuid: String, name: String, start: String? = nil, end: String? = nil) -> RequestBuilder<DataPointDataIDs> {
        var localVariablePath = "/v1/projects/{project_uuid}/data_ids"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "end": end?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataPointDataIDs>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter order
     */
    public enum Order_listProjectDataPoints: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     * enum for parameter timeFormat
     */
    public enum TimeFormat_listProjectDataPoints: String, CaseIterable {
        case ns = "ns"
        case us = "us"
        case ms = "ms"
        case s = "s"
        case rfc3339 = "rfc3339"
    }

    /**
     List Project Data Points
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter name: (query) どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 
     - parameter idq: (query) 取得したいデータポイントの条件を以下のフォーマットで指定します。 &#x60;data_id&#x60; には、 &#x60;GET /data_ids&#x60; エンドポイントで取得できる &#x60;data_id&#x60; の値を使用します。  - &#x60;&lt;data_type&gt;:&lt;channel&gt;/&lt;data_id&gt;&#x60;  各セグメントにはワイルドカード(*)を使用することができます。 例:   - CAN(data_type &#x3D; &#x60;1&#x60;)のデータポイントを取得する -&gt; &#x60;1:*_/_*&#x60; または &#x60;1&#x60;   - チャンネル2のCANデータポイントを取得する -&gt; &#x60;1:2/_*&#x60; または &#x60;1:2&#x60;   - チャンネル2のCANデータポイントのうち、データIDが &#x60;00000001&#x60; のものを取得する -&gt; &#x60;1:2/00000001&#x60; (optional)
     - parameter start: (query) 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter end: (query) 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter since: (query) 指定した時刻以降に更新された計測のみを取得します。 以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z).   - UNIX時刻（マイクロ秒）(**Deprecated**). (optional)
     - parameter exitOnError: (query) &#x60;true&#x60; を指定した場合、取得中にエラーが発生すると処理を中断し、中断前までのデータポイントのリストを返します。 (optional, default to "false")
     - parameter label: (query) 信号定義のラベル (optional)
     - parameter period: (query) データポイントを指定した間隔（マイクロ秒）に間引きます。（ **Experimental** ）  指定された間隔ごとに最新のデータポイントを残し、それ以外を除去します。 また、指定された間隔になるようにデータポイントの時刻を揃えます。 &#x60;&#x60;&#x60;  --1--2----3---4--5---6-7--89-a---b-c---d--e--&gt; period指定なし  |     |     |     |     |     |     |     |  |     |     |     |     |     |     |     |  2-----3-----5-----7-----a-----c-----d-----e--&gt; period指定あり   |&lt;---&gt;| period &#x60;&#x60;&#x60; (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数 (optional)
     - parameter order: (query) 並べ替えの順序。デフォルトは &#x60;asc&#x60; （昇順） (optional)
     - parameter timeFormat: (query) レスポンスの時刻表示形式。デフォルトは &#x60;us&#x60; （マイクロ秒） (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listProjectDataPoints(projectUuid: String, name: String, idq: [String]? = nil, start: String? = nil, end: String? = nil, since: String? = nil, exitOnError: String? = nil, label: [String]? = nil, period: Int64? = nil, limit: Int? = nil, order: Order_listProjectDataPoints? = nil, timeFormat: TimeFormat_listProjectDataPoints? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: DataPoint?, _ error: Error?) -> Void)) {
        listProjectDataPointsWithRequestBuilder(projectUuid: projectUuid, name: name, idq: idq, start: start, end: end, since: since, exitOnError: exitOnError, label: label, period: period, limit: limit, order: order, timeFormat: timeFormat).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Project Data Points
     - GET /v1/projects/{project_uuid}/data
     - データポイントのリストを取得します。 返却されるデータポイントはJSON形式です。データポイントごとに改行で区切られます。
     - responseHeaders: [Transfer-Encoding(String)]
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter name: (query) どの計測またはどのエッジのデータポイントを取得するかを、以下のいずれかを使って指定します： - 計測UUID - エッジUUID - エッジの名前  最初に、指定されたnameに一致する計測UUIDがあるかが検索されます。なければ一致するエッジUUIDがあるかが検索され、それもなければ一致するエッジの名前があるかが検索されます。 
     - parameter idq: (query) 取得したいデータポイントの条件を以下のフォーマットで指定します。 &#x60;data_id&#x60; には、 &#x60;GET /data_ids&#x60; エンドポイントで取得できる &#x60;data_id&#x60; の値を使用します。  - &#x60;&lt;data_type&gt;:&lt;channel&gt;/&lt;data_id&gt;&#x60;  各セグメントにはワイルドカード(*)を使用することができます。 例:   - CAN(data_type &#x3D; &#x60;1&#x60;)のデータポイントを取得する -&gt; &#x60;1:*_/_*&#x60; または &#x60;1&#x60;   - チャンネル2のCANデータポイントを取得する -&gt; &#x60;1:2/_*&#x60; または &#x60;1:2&#x60;   - チャンネル2のCANデータポイントのうち、データIDが &#x60;00000001&#x60; のものを取得する -&gt; &#x60;1:2/00000001&#x60; (optional)
     - parameter start: (query) 取得対象範囲の始点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter end: (query) 取得対象範囲の終点。以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z)   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter since: (query) 指定した時刻以降に更新された計測のみを取得します。 以下のいずれかの形式で指定します。   - rfc3339(ex 2019-10-29T03:04:05.341268Z).   - UNIX時刻（マイクロ秒）(**Deprecated**). (optional)
     - parameter exitOnError: (query) &#x60;true&#x60; を指定した場合、取得中にエラーが発生すると処理を中断し、中断前までのデータポイントのリストを返します。 (optional, default to "false")
     - parameter label: (query) 信号定義のラベル (optional)
     - parameter period: (query) データポイントを指定した間隔（マイクロ秒）に間引きます。（ **Experimental** ）  指定された間隔ごとに最新のデータポイントを残し、それ以外を除去します。 また、指定された間隔になるようにデータポイントの時刻を揃えます。 &#x60;&#x60;&#x60;  --1--2----3---4--5---6-7--89-a---b-c---d--e--&gt; period指定なし  |     |     |     |     |     |     |     |  |     |     |     |     |     |     |     |  2-----3-----5-----7-----a-----c-----d-----e--&gt; period指定あり   |&lt;---&gt;| period &#x60;&#x60;&#x60; (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数 (optional)
     - parameter order: (query) 並べ替えの順序。デフォルトは &#x60;asc&#x60; （昇順） (optional)
     - parameter timeFormat: (query) レスポンスの時刻表示形式。デフォルトは &#x60;us&#x60; （マイクロ秒） (optional)
     - returns: RequestBuilder<DataPoint> 
     */
    open class func listProjectDataPointsWithRequestBuilder(projectUuid: String, name: String, idq: [String]? = nil, start: String? = nil, end: String? = nil, since: String? = nil, exitOnError: String? = nil, label: [String]? = nil, period: Int64? = nil, limit: Int? = nil, order: Order_listProjectDataPoints? = nil, timeFormat: TimeFormat_listProjectDataPoints? = nil) -> RequestBuilder<DataPoint> {
        var localVariablePath = "/v1/projects/{project_uuid}/data"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name.encodeToJSON(),
            "idq": idq?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "end": end?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "exit_on_error": exitOnError?.encodeToJSON(),
            "label": label?.encodeToJSON(),
            "period": period?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "order": order?.encodeToJSON(),
            "time_format": timeFormat?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataPoint>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
    
    open class func listDataPointsForProtobufWithRequestBuilder(name: String, idq: [String]? = nil, start: String? = nil, end: String? = nil, since: String? = nil, exitOnError: String? = nil, label: [String]? = nil, period: Int64? = nil, limit: Int64? = nil, order: Order_listDataPoints? = nil, timeFormat: TimeFormat_listDataPoints? = nil) -> RequestBuilder<Data> {
        let localVariablePath = "/v1/data"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name.encodeToJSON(),
            "idq": idq?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "end": end?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "exit_on_error": exitOnError?.encodeToJSON(),
            "label": label?.encodeToJSON(),
            "period": period?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "order": order?.encodeToJSON(),
            "time_format": timeFormat?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type" : "application/protobuf",
            "Accept" : "application/protobuf"
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Data>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    open class func listProjectDataPointsForProtobufWithRequestBuilder(projectUuid: String, name: String, idq: [String]? = nil, start: String? = nil, end: String? = nil, since: String? = nil, exitOnError: String? = nil, label: [String]? = nil, period: Int64? = nil, limit: Int64? = nil, order: Order_listDataPoints? = nil, timeFormat: TimeFormat_listDataPoints? = nil) -> RequestBuilder<Data> {
        let localVariablePath = "/v1/projects/\(projectUuid)/data"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name.encodeToJSON(),
            "idq": idq?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "end": end?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "exit_on_error": exitOnError?.encodeToJSON(),
            "label": label?.encodeToJSON(),
            "period": period?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "order": order?.encodeToJSON(),
            "time_format": timeFormat?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type" : "application/protobuf",
            "Accept" : "application/protobuf"
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Data>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
