//
// AuthMeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthMeAPI {

    /**
     Change Password
     
     - parameter changePasswordRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func changePassword(changePasswordRequest: ChangePasswordRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserPassword?, _ error: Error?) -> Void)) {
        changePasswordWithRequestBuilder(changePasswordRequest: changePasswordRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Change Password
     - PUT /auth/users/me/password
     - パスワードを変更します。 現在のパスワード `old_password` または `recovery_token` が必要です。
     - parameter changePasswordRequest: (body)  (optional)
     - returns: RequestBuilder<UserPassword> 
     */
    open class func changePasswordWithRequestBuilder(changePasswordRequest: ChangePasswordRequest? = nil) -> RequestBuilder<UserPassword> {
        let localVariablePath = "/auth/users/me/password"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: changePasswordRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPassword>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Check Password
     
     - parameter checkPasswordRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func checkPassword(checkPasswordRequest: CheckPasswordRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: CheckPasswordResult?, _ error: Error?) -> Void)) {
        checkPasswordWithRequestBuilder(checkPasswordRequest: checkPasswordRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Check Password
     - POST /auth/users/me/password/check
     - パスワードがポリシーに適合しているかをチェックします。
     - parameter checkPasswordRequest: (body)  (optional)
     - returns: RequestBuilder<CheckPasswordResult> 
     */
    open class func checkPasswordWithRequestBuilder(checkPasswordRequest: CheckPasswordRequest? = nil) -> RequestBuilder<CheckPasswordResult> {
        let localVariablePath = "/auth/users/me/password/check"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: checkPasswordRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CheckPasswordResult>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create My API Token
     
     - parameter createUserAPITokenRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createMyAPIToken(createUserAPITokenRequest: CreateUserAPITokenRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserAPIToken?, _ error: Error?) -> Void)) {
        createMyAPITokenWithRequestBuilder(createUserAPITokenRequest: createUserAPITokenRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create My API Token
     - POST /auth/users/me/tokens
     - 自分（ユーザー）のAPIトークンを作成します。
     - parameter createUserAPITokenRequest: (body)  (optional)
     - returns: RequestBuilder<UserAPIToken> 
     */
    open class func createMyAPITokenWithRequestBuilder(createUserAPITokenRequest: CreateUserAPITokenRequest? = nil) -> RequestBuilder<UserAPIToken> {
        let localVariablePath = "/auth/users/me/tokens"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createUserAPITokenRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserAPIToken>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create My Email
     
     - parameter createEmailRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createMyEmail(createEmailRequest: CreateEmailRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserEmail?, _ error: Error?) -> Void)) {
        createMyEmailWithRequestBuilder(createEmailRequest: createEmailRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create My Email
     - POST /auth/users/me/emails
     - 自分（ユーザー）のメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
     - parameter createEmailRequest: (body)  (optional)
     - returns: RequestBuilder<UserEmail> 
     */
    open class func createMyEmailWithRequestBuilder(createEmailRequest: CreateEmailRequest? = nil) -> RequestBuilder<UserEmail> {
        let localVariablePath = "/auth/users/me/emails"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createEmailRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserEmail>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete My API Token
     
     - parameter userApiTokenId: (path) APIトークンのID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMyAPIToken(userApiTokenId: Int64, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteMyAPITokenWithRequestBuilder(userApiTokenId: userApiTokenId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete My API Token
     - DELETE /auth/users/me/tokens/{user_api_token_id}
     - 自分（ユーザー）のAPIトークンを削除します。
     - parameter userApiTokenId: (path) APIトークンのID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMyAPITokenWithRequestBuilder(userApiTokenId: Int64) -> RequestBuilder<Void> {
        var localVariablePath = "/auth/users/me/tokens/{user_api_token_id}"
        let userApiTokenIdPreEscape = "\(APIHelper.mapValueToPathItem(userApiTokenId))"
        let userApiTokenIdPostEscape = userApiTokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_api_token_id}", with: userApiTokenIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete My Email
     
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMyEmail(userEmailId: Int64, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteMyEmailWithRequestBuilder(userEmailId: userEmailId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete My Email
     - DELETE /auth/users/me/emails/{user_email_id}
     - 自分（ユーザー）のメールアドレスを削除します。
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMyEmailWithRequestBuilder(userEmailId: Int64) -> RequestBuilder<Void> {
        var localVariablePath = "/auth/users/me/emails/{user_email_id}"
        let userEmailIdPreEscape = "\(APIHelper.mapValueToPathItem(userEmailId))"
        let userEmailIdPostEscape = userEmailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_email_id}", with: userEmailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Me
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMe(apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: User?, _ error: Error?) -> Void)) {
        getMeWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Me
     - GET /auth/users/me
     - 自分（ユーザー）を取得します。
     - returns: RequestBuilder<User> 
     */
    open class func getMeWithRequestBuilder() -> RequestBuilder<User> {
        let localVariablePath = "/auth/users/me"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List My API Tokens
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listMyAPITokens(apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserAPITokens?, _ error: Error?) -> Void)) {
        listMyAPITokensWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List My API Tokens
     - GET /auth/users/me/tokens
     - 自分（ユーザー）のAPIトークンのリストを取得します。
     - returns: RequestBuilder<UserAPITokens> 
     */
    open class func listMyAPITokensWithRequestBuilder() -> RequestBuilder<UserAPITokens> {
        let localVariablePath = "/auth/users/me/tokens"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserAPITokens>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List My Roles
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listMyRoles(apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Roles?, _ error: Error?) -> Void)) {
        listMyRolesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List My Roles
     - GET /auth/users/me/roles
     - 自分（ユーザー）に割り当てられたロールのリストを取得します。
     - returns: RequestBuilder<Roles> 
     */
    open class func listMyRolesWithRequestBuilder() -> RequestBuilder<Roles> {
        let localVariablePath = "/auth/users/me/roles"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Roles>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Send Verification Email to Me
     
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendVerificationEmailToMyAddress(userEmailId: Int64, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserEmailVerification?, _ error: Error?) -> Void)) {
        sendVerificationEmailToMyAddressWithRequestBuilder(userEmailId: userEmailId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Send Verification Email to Me
     - PUT /auth/users/me/emails/{user_email_id}/verification
     - メールアドレスを確認するための確認メールを送信します。
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - returns: RequestBuilder<UserEmailVerification> 
     */
    open class func sendVerificationEmailToMyAddressWithRequestBuilder(userEmailId: Int64) -> RequestBuilder<UserEmailVerification> {
        var localVariablePath = "/auth/users/me/emails/{user_email_id}/verification"
        let userEmailIdPreEscape = "\(APIHelper.mapValueToPathItem(userEmailId))"
        let userEmailIdPostEscape = userEmailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_email_id}", with: userEmailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserEmailVerification>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update Me
     
     - parameter patchUserRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMe(patchUserRequest: PatchUserRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: User?, _ error: Error?) -> Void)) {
        updateMeWithRequestBuilder(patchUserRequest: patchUserRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Me
     - PATCH /auth/users/me
     - 自分（ユーザー）を更新します。
     - parameter patchUserRequest: (body)  (optional)
     - returns: RequestBuilder<User> 
     */
    open class func updateMeWithRequestBuilder(patchUserRequest: PatchUserRequest? = nil) -> RequestBuilder<User> {
        let localVariablePath = "/auth/users/me"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update My API Token
     
     - parameter userApiTokenId: (path) APIトークンのID 
     - parameter updateUserAPITokenRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMyAPIToken(userApiTokenId: Int64, updateUserAPITokenRequest: UpdateUserAPITokenRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserAPIToken?, _ error: Error?) -> Void)) {
        updateMyAPITokenWithRequestBuilder(userApiTokenId: userApiTokenId, updateUserAPITokenRequest: updateUserAPITokenRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update My API Token
     - PATCH /auth/users/me/tokens/{user_api_token_id}
     - 自分（ユーザー）のAPIトークンを作成します。
     - parameter userApiTokenId: (path) APIトークンのID 
     - parameter updateUserAPITokenRequest: (body)  (optional)
     - returns: RequestBuilder<UserAPIToken> 
     */
    open class func updateMyAPITokenWithRequestBuilder(userApiTokenId: Int64, updateUserAPITokenRequest: UpdateUserAPITokenRequest? = nil) -> RequestBuilder<UserAPIToken> {
        var localVariablePath = "/auth/users/me/tokens/{user_api_token_id}"
        let userApiTokenIdPreEscape = "\(APIHelper.mapValueToPathItem(userApiTokenId))"
        let userApiTokenIdPostEscape = userApiTokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_api_token_id}", with: userApiTokenIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateUserAPITokenRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserAPIToken>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Set My Email as Verified
     
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - parameter updateEmailVerifiedRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMyAddressToVerified(userEmailId: Int64, updateEmailVerifiedRequest: UpdateEmailVerifiedRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserEmail?, _ error: Error?) -> Void)) {
        updateMyAddressToVerifiedWithRequestBuilder(userEmailId: userEmailId, updateEmailVerifiedRequest: updateEmailVerifiedRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set My Email as Verified
     - PUT /auth/users/me/emails/{user_email_id}/verified
     - 自分（ユーザー）のメールアドレスを確認済みにします。
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - parameter updateEmailVerifiedRequest: (body)  (optional)
     - returns: RequestBuilder<UserEmail> 
     */
    open class func updateMyAddressToVerifiedWithRequestBuilder(userEmailId: Int64, updateEmailVerifiedRequest: UpdateEmailVerifiedRequest? = nil) -> RequestBuilder<UserEmail> {
        var localVariablePath = "/auth/users/me/emails/{user_email_id}/verified"
        let userEmailIdPreEscape = "\(APIHelper.mapValueToPathItem(userEmailId))"
        let userEmailIdPostEscape = userEmailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_email_id}", with: userEmailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateEmailVerifiedRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserEmail>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update My Email
     
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - parameter patchEmailRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMyEmail(userEmailId: Int64, patchEmailRequest: PatchEmailRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserEmail?, _ error: Error?) -> Void)) {
        updateMyEmailWithRequestBuilder(userEmailId: userEmailId, patchEmailRequest: patchEmailRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update My Email
     - PATCH /auth/users/me/emails/{user_email_id}
     - 自分（ユーザー）のメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - parameter patchEmailRequest: (body)  (optional)
     - returns: RequestBuilder<UserEmail> 
     */
    open class func updateMyEmailWithRequestBuilder(userEmailId: Int64, patchEmailRequest: PatchEmailRequest? = nil) -> RequestBuilder<UserEmail> {
        var localVariablePath = "/auth/users/me/emails/{user_email_id}"
        let userEmailIdPreEscape = "\(APIHelper.mapValueToPathItem(userEmailId))"
        let userEmailIdPostEscape = userEmailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_email_id}", with: userEmailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchEmailRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserEmail>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
