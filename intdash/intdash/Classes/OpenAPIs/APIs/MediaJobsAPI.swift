//
// MediaJobsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MediaJobsAPI {

    /**
     Create Job
     
     - parameter createJobRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createJob(createJobRequest: CreateJobRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Job?, _ error: Error?) -> Void)) {
        createJobWithRequestBuilder(createJobRequest: createJobRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Job
     - POST /media/jobs
     - HLSへの変換ジョブを作成します。
     - parameter createJobRequest: (body)  (optional)
     - returns: RequestBuilder<Job> 
     */
    open class func createJobWithRequestBuilder(createJobRequest: CreateJobRequest? = nil) -> RequestBuilder<Job> {
        let localVariablePath = "/media/jobs"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createJobRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Job>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Project Job
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter createJobRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createProjectJob(projectUuid: String, createJobRequest: CreateJobRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Job?, _ error: Error?) -> Void)) {
        createProjectJobWithRequestBuilder(projectUuid: projectUuid, createJobRequest: createJobRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Project Job
     - POST /media/projects/{project_uuid}/jobs
     - HLSへの変換ジョブを作成します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter createJobRequest: (body)  (optional)
     - returns: RequestBuilder<Job> 
     */
    open class func createProjectJobWithRequestBuilder(projectUuid: String, createJobRequest: CreateJobRequest? = nil) -> RequestBuilder<Job> {
        var localVariablePath = "/media/projects/{project_uuid}/jobs"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createJobRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Job>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getJobs: String, CaseIterable {
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    /**
     * enum for parameter order
     */
    public enum Order_getJobs: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List Jobs
     
     - parameter uuid: (query) 取得したいジョブのUUID (optional)
     - parameter measUuid: (query) 計測のUUID (optional)
     - parameter type: (query) - update   - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を     HLSに変換するジョブ。通常は計測実行中に行います。 - finalize   - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ - delete   - 変換によって作成されたHLSデータを削除するジョブ。     このジョブを実行すると、HLSプレイリスト、セグメントファイル、     データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。 (optional)
     - parameter status: (query) ジョブのステータス (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数 (optional)
     - parameter page: (query) 取得するページ番号 (optional, default to 1)
     - parameter sort: (query) 並べ替えに使用するキー (optional, default to .createdAt)
     - parameter order: (query) 並べ替えの順序 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJobs(uuid: [String]? = nil, measUuid: [String]? = nil, type: [JobType]? = nil, status: [JobStatus]? = nil, limit: Double? = nil, page: Int? = nil, sort: Sort_getJobs? = nil, order: Order_getJobs? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: JobList?, _ error: Error?) -> Void)) {
        getJobsWithRequestBuilder(uuid: uuid, measUuid: measUuid, type: type, status: status, limit: limit, page: page, sort: sort, order: order).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Jobs
     - GET /media/jobs
     - HLSへの変換ジョブのリストを取得します。
     - parameter uuid: (query) 取得したいジョブのUUID (optional)
     - parameter measUuid: (query) 計測のUUID (optional)
     - parameter type: (query) - update   - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を     HLSに変換するジョブ。通常は計測実行中に行います。 - finalize   - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ - delete   - 変換によって作成されたHLSデータを削除するジョブ。     このジョブを実行すると、HLSプレイリスト、セグメントファイル、     データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。 (optional)
     - parameter status: (query) ジョブのステータス (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数 (optional)
     - parameter page: (query) 取得するページ番号 (optional, default to 1)
     - parameter sort: (query) 並べ替えに使用するキー (optional, default to .createdAt)
     - parameter order: (query) 並べ替えの順序 (optional)
     - returns: RequestBuilder<JobList> 
     */
    open class func getJobsWithRequestBuilder(uuid: [String]? = nil, measUuid: [String]? = nil, type: [JobType]? = nil, status: [JobStatus]? = nil, limit: Double? = nil, page: Int? = nil, sort: Sort_getJobs? = nil, order: Order_getJobs? = nil) -> RequestBuilder<JobList> {
        let localVariablePath = "/media/jobs"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "uuid": uuid?.encodeToJSON(),
            "meas_uuid": measUuid?.encodeToJSON(),
            "type": type?.encodeToJSON(),
            "status": status?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JobList>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getProjectJobs: String, CaseIterable {
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    /**
     * enum for parameter order
     */
    public enum Order_getProjectJobs: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List Project Jobs
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter uuid: (query) 取得したいジョブのUUID (optional)
     - parameter measUuid: (query) 計測のUUID (optional)
     - parameter type: (query) - update   - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を     HLSに変換するジョブ。通常は計測実行中に行います。 - finalize   - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ - delete   - 変換によって作成されたHLSデータを削除するジョブ。     このジョブを実行すると、HLSプレイリスト、セグメントファイル、     データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。 (optional)
     - parameter status: (query) ジョブのステータス (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数 (optional)
     - parameter page: (query) 取得するページ番号 (optional, default to 1)
     - parameter sort: (query) 並べ替えに使用するキー (optional, default to .createdAt)
     - parameter order: (query) 並べ替えの順序 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectJobs(projectUuid: String, uuid: [String]? = nil, measUuid: [String]? = nil, type: [JobType]? = nil, status: [JobStatus]? = nil, limit: Double? = nil, page: Int? = nil, sort: Sort_getProjectJobs? = nil, order: Order_getProjectJobs? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: JobList?, _ error: Error?) -> Void)) {
        getProjectJobsWithRequestBuilder(projectUuid: projectUuid, uuid: uuid, measUuid: measUuid, type: type, status: status, limit: limit, page: page, sort: sort, order: order).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Project Jobs
     - GET /media/projects/{project_uuid}/jobs
     - HLSへの変換ジョブのリストを取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter uuid: (query) 取得したいジョブのUUID (optional)
     - parameter measUuid: (query) 計測のUUID (optional)
     - parameter type: (query) - update   - 計測内の動画データのうち、新しくサーバーが受信した部分（HLSにまだ変換されていない部分）を     HLSに変換するジョブ。通常は計測実行中に行います。 - finalize   - 計測全体をサーバーに回収した後に、動画データ全体をHLSに変換するジョブ - delete   - 変換によって作成されたHLSデータを削除するジョブ。     このジョブを実行すると、HLSプレイリスト、セグメントファイル、     データベース内のHLSに関する情報が削除され、この動画のHLSによる再生はできなくなります。 (optional)
     - parameter status: (query) ジョブのステータス (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数 (optional)
     - parameter page: (query) 取得するページ番号 (optional, default to 1)
     - parameter sort: (query) 並べ替えに使用するキー (optional, default to .createdAt)
     - parameter order: (query) 並べ替えの順序 (optional)
     - returns: RequestBuilder<JobList> 
     */
    open class func getProjectJobsWithRequestBuilder(projectUuid: String, uuid: [String]? = nil, measUuid: [String]? = nil, type: [JobType]? = nil, status: [JobStatus]? = nil, limit: Double? = nil, page: Int? = nil, sort: Sort_getProjectJobs? = nil, order: Order_getProjectJobs? = nil) -> RequestBuilder<JobList> {
        var localVariablePath = "/media/projects/{project_uuid}/jobs"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "uuid": uuid?.encodeToJSON(),
            "meas_uuid": measUuid?.encodeToJSON(),
            "type": type?.encodeToJSON(),
            "status": status?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JobList>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
