//
// MediaVideosAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MediaVideosAPI {

    /**
     Cancel Creating JPEG
     
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelCreatingJpeg(videoUuid: String, jpegUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Jpeg?, _ error: Error?) -> Void)) {
        cancelCreatingJpegWithRequestBuilder(videoUuid: videoUuid, jpegUuid: jpegUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel Creating JPEG
     - PUT /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/cancel_convert
     - 動画（video）からJPEGデータへの変換をキャンセルします。
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - returns: RequestBuilder<Jpeg> 
     */
    open class func cancelCreatingJpegWithRequestBuilder(videoUuid: String, jpegUuid: String) -> RequestBuilder<Jpeg> {
        var localVariablePath = "/media/videos/{video_uuid}/jpegs/{jpeg_uuid}/cancel_convert"
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let jpegUuidPreEscape = "\(APIHelper.mapValueToPathItem(jpegUuid))"
        let jpegUuidPostEscape = jpegUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jpeg_uuid}", with: jpegUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Jpeg>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Cancel Creating MP4
     
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter mp4Uuid: (path) MP4のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelCreatingMP4(videoUuid: String, mp4Uuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MP4?, _ error: Error?) -> Void)) {
        cancelCreatingMP4WithRequestBuilder(videoUuid: videoUuid, mp4Uuid: mp4Uuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel Creating MP4
     - PUT /media/videos/{video_uuid}/mp4s/{mp4_uuid}/cancel_convert
     - 動画（video）からMP4データへの変換をキャンセルします。
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter mp4Uuid: (path) MP4のUUID 
     - returns: RequestBuilder<MP4> 
     */
    open class func cancelCreatingMP4WithRequestBuilder(videoUuid: String, mp4Uuid: String) -> RequestBuilder<MP4> {
        var localVariablePath = "/media/videos/{video_uuid}/mp4s/{mp4_uuid}/cancel_convert"
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let mp4UuidPreEscape = "\(APIHelper.mapValueToPathItem(mp4Uuid))"
        let mp4UuidPostEscape = mp4UuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mp4_uuid}", with: mp4UuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MP4>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Cancel Creating Project JPEG
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelCreatingProjectJpeg(projectUuid: String, videoUuid: String, jpegUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Jpeg?, _ error: Error?) -> Void)) {
        cancelCreatingProjectJpegWithRequestBuilder(projectUuid: projectUuid, videoUuid: videoUuid, jpegUuid: jpegUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel Creating Project JPEG
     - PUT /media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}/cancel_convert
     - 動画（video）からJPEGデータへの変換をキャンセルします。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - returns: RequestBuilder<Jpeg> 
     */
    open class func cancelCreatingProjectJpegWithRequestBuilder(projectUuid: String, videoUuid: String, jpegUuid: String) -> RequestBuilder<Jpeg> {
        var localVariablePath = "/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}/cancel_convert"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let jpegUuidPreEscape = "\(APIHelper.mapValueToPathItem(jpegUuid))"
        let jpegUuidPostEscape = jpegUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jpeg_uuid}", with: jpegUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Jpeg>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Cancel Creating Project MP4
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter mp4Uuid: (path) MP4のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelCreatingProjectMP4(projectUuid: String, videoUuid: String, mp4Uuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MP4?, _ error: Error?) -> Void)) {
        cancelCreatingProjectMP4WithRequestBuilder(projectUuid: projectUuid, videoUuid: videoUuid, mp4Uuid: mp4Uuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Cancel Creating Project MP4
     - PUT /media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}/cancel_convert
     - 動画（video）からMP4データへの変換をキャンセルします。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter mp4Uuid: (path) MP4のUUID 
     - returns: RequestBuilder<MP4> 
     */
    open class func cancelCreatingProjectMP4WithRequestBuilder(projectUuid: String, videoUuid: String, mp4Uuid: String) -> RequestBuilder<MP4> {
        var localVariablePath = "/media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}/cancel_convert"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let mp4UuidPreEscape = "\(APIHelper.mapValueToPathItem(mp4Uuid))"
        let mp4UuidPostEscape = mp4UuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mp4_uuid}", with: mp4UuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MP4>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create JPEG
     
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter createJpegRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createJpeg(videoUuid: String, createJpegRequest: CreateJpegRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Jpeg?, _ error: Error?) -> Void)) {
        createJpegWithRequestBuilder(videoUuid: videoUuid, createJpegRequest: createJpegRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create JPEG
     - POST /media/videos/{video_uuid}/jpegs
     - 動画（video）を変換してJPEGデータを作成します。
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter createJpegRequest: (body)  (optional)
     - returns: RequestBuilder<Jpeg> 
     */
    open class func createJpegWithRequestBuilder(videoUuid: String, createJpegRequest: CreateJpegRequest? = nil) -> RequestBuilder<Jpeg> {
        var localVariablePath = "/media/videos/{video_uuid}/jpegs"
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createJpegRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Jpeg>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create MP4
     
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter createMP4Request: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createMP4(videoUuid: String, createMP4Request: CreateMP4Request? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MP4?, _ error: Error?) -> Void)) {
        createMP4WithRequestBuilder(videoUuid: videoUuid, createMP4Request: createMP4Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create MP4
     - POST /media/videos/{video_uuid}/mp4s
     - 動画（video）を変換してMP4データを作成します。
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter createMP4Request: (body)  (optional)
     - returns: RequestBuilder<MP4> 
     */
    open class func createMP4WithRequestBuilder(videoUuid: String, createMP4Request: CreateMP4Request? = nil) -> RequestBuilder<MP4> {
        var localVariablePath = "/media/videos/{video_uuid}/mp4s"
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createMP4Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MP4>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Project JPEG
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter createJpegRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createProjectJpeg(projectUuid: String, videoUuid: String, createJpegRequest: CreateJpegRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Jpeg?, _ error: Error?) -> Void)) {
        createProjectJpegWithRequestBuilder(projectUuid: projectUuid, videoUuid: videoUuid, createJpegRequest: createJpegRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Project JPEG
     - POST /media/projects/{project_uuid}/videos/{video_uuid}/jpegs
     - 動画（video）を変換してJPEGデータを作成します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter createJpegRequest: (body)  (optional)
     - returns: RequestBuilder<Jpeg> 
     */
    open class func createProjectJpegWithRequestBuilder(projectUuid: String, videoUuid: String, createJpegRequest: CreateJpegRequest? = nil) -> RequestBuilder<Jpeg> {
        var localVariablePath = "/media/projects/{project_uuid}/videos/{video_uuid}/jpegs"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createJpegRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Jpeg>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Project MP4
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter createMP4Request: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createProjectMP4(projectUuid: String, videoUuid: String, createMP4Request: CreateMP4Request? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MP4?, _ error: Error?) -> Void)) {
        createProjectMP4WithRequestBuilder(projectUuid: projectUuid, videoUuid: videoUuid, createMP4Request: createMP4Request).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Project MP4
     - POST /media/projects/{project_uuid}/videos/{video_uuid}/mp4s
     - 動画（video）を変換してMP4データを作成します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter createMP4Request: (body)  (optional)
     - returns: RequestBuilder<MP4> 
     */
    open class func createProjectMP4WithRequestBuilder(projectUuid: String, videoUuid: String, createMP4Request: CreateMP4Request? = nil) -> RequestBuilder<MP4> {
        var localVariablePath = "/media/projects/{project_uuid}/videos/{video_uuid}/mp4s"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createMP4Request)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MP4>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete JPEG
     
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteJpeg(videoUuid: String, jpegUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteJpegWithRequestBuilder(videoUuid: videoUuid, jpegUuid: jpegUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete JPEG
     - DELETE /media/videos/{video_uuid}/jpegs/{jpeg_uuid}
     - 動画（video）から変換されたJPEGデータを削除します。
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteJpegWithRequestBuilder(videoUuid: String, jpegUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/media/videos/{video_uuid}/jpegs/{jpeg_uuid}"
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let jpegUuidPreEscape = "\(APIHelper.mapValueToPathItem(jpegUuid))"
        let jpegUuidPostEscape = jpegUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jpeg_uuid}", with: jpegUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete MP4
     
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter mp4Uuid: (path) MP4のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMP4(videoUuid: String, mp4Uuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteMP4WithRequestBuilder(videoUuid: videoUuid, mp4Uuid: mp4Uuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete MP4
     - DELETE /media/videos/{video_uuid}/mp4s/{mp4_uuid}
     - 動画（video）から変換されたMP4データを削除します。
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter mp4Uuid: (path) MP4のUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMP4WithRequestBuilder(videoUuid: String, mp4Uuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/media/videos/{video_uuid}/mp4s/{mp4_uuid}"
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let mp4UuidPreEscape = "\(APIHelper.mapValueToPathItem(mp4Uuid))"
        let mp4UuidPostEscape = mp4UuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mp4_uuid}", with: mp4UuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete Project JPEG
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteProjectJpeg(projectUuid: String, videoUuid: String, jpegUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteProjectJpegWithRequestBuilder(projectUuid: projectUuid, videoUuid: videoUuid, jpegUuid: jpegUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Project JPEG
     - DELETE /media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}
     - 動画（video）から変換されたJPEGデータを削除します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProjectJpegWithRequestBuilder(projectUuid: String, videoUuid: String, jpegUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let jpegUuidPreEscape = "\(APIHelper.mapValueToPathItem(jpegUuid))"
        let jpegUuidPostEscape = jpegUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jpeg_uuid}", with: jpegUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete Project MP4
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter mp4Uuid: (path) MP4のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteProjectMP4(projectUuid: String, videoUuid: String, mp4Uuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteProjectMP4WithRequestBuilder(projectUuid: projectUuid, videoUuid: videoUuid, mp4Uuid: mp4Uuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Project MP4
     - DELETE /media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}
     - 動画（video）から変換されたMP4データを削除します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter mp4Uuid: (path) MP4のUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProjectMP4WithRequestBuilder(projectUuid: String, videoUuid: String, mp4Uuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let mp4UuidPreEscape = "\(APIHelper.mapValueToPathItem(mp4Uuid))"
        let mp4UuidPostEscape = mp4UuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mp4_uuid}", with: mp4UuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get JPEG
     
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJpeg(videoUuid: String, jpegUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Jpeg?, _ error: Error?) -> Void)) {
        getJpegWithRequestBuilder(videoUuid: videoUuid, jpegUuid: jpegUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get JPEG
     - GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}
     - 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、`GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip` を使用してください。
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - returns: RequestBuilder<Jpeg> 
     */
    open class func getJpegWithRequestBuilder(videoUuid: String, jpegUuid: String) -> RequestBuilder<Jpeg> {
        var localVariablePath = "/media/videos/{video_uuid}/jpegs/{jpeg_uuid}"
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let jpegUuidPreEscape = "\(APIHelper.mapValueToPathItem(jpegUuid))"
        let jpegUuidPostEscape = jpegUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jpeg_uuid}", with: jpegUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Jpeg>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get JPEG as zip
     
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - parameter indexes: (query) 取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJpegAsZip(videoUuid: String, jpegUuid: String, indexes: [Int]? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getJpegAsZipWithRequestBuilder(videoUuid: videoUuid, jpegUuid: jpegUuid, indexes: indexes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get JPEG as zip
     - GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip
     - JPEGデータをZIPファイルにまとめた形で取得します。
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - parameter indexes: (query) 取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getJpegAsZipWithRequestBuilder(videoUuid: String, jpegUuid: String, indexes: [Int]? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip"
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let jpegUuidPreEscape = "\(APIHelper.mapValueToPathItem(jpegUuid))"
        let jpegUuidPostEscape = jpegUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jpeg_uuid}", with: jpegUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "indexes": indexes?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List JPEGs
     
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJpegs(videoUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Jpegs?, _ error: Error?) -> Void)) {
        getJpegsWithRequestBuilder(videoUuid: videoUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List JPEGs
     - GET /media/videos/{video_uuid}/jpegs
     - 動画（video）から変換されたJPEGデータのリストを取得します。
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - returns: RequestBuilder<Jpegs> 
     */
    open class func getJpegsWithRequestBuilder(videoUuid: String) -> RequestBuilder<Jpegs> {
        var localVariablePath = "/media/videos/{video_uuid}/jpegs"
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Jpegs>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get MP4
     
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter mp4Uuid: (path) MP4のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMP4(videoUuid: String, mp4Uuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MP4?, _ error: Error?) -> Void)) {
        getMP4WithRequestBuilder(videoUuid: videoUuid, mp4Uuid: mp4Uuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get MP4
     - GET /media/videos/{video_uuid}/mp4s/{mp4_uuid}
     - 動画（video）から変換されたMP4データの情報を取得します。
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter mp4Uuid: (path) MP4のUUID 
     - returns: RequestBuilder<MP4> 
     */
    open class func getMP4WithRequestBuilder(videoUuid: String, mp4Uuid: String) -> RequestBuilder<MP4> {
        var localVariablePath = "/media/videos/{video_uuid}/mp4s/{mp4_uuid}"
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let mp4UuidPreEscape = "\(APIHelper.mapValueToPathItem(mp4Uuid))"
        let mp4UuidPostEscape = mp4UuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mp4_uuid}", with: mp4UuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MP4>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List MP4s
     
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMP4s(videoUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MP4s?, _ error: Error?) -> Void)) {
        getMP4sWithRequestBuilder(videoUuid: videoUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List MP4s
     - GET /media/videos/{video_uuid}/mp4s
     - 動画（video）から変換されたMP4データのリストを取得します。
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - returns: RequestBuilder<MP4s> 
     */
    open class func getMP4sWithRequestBuilder(videoUuid: String) -> RequestBuilder<MP4s> {
        var localVariablePath = "/media/videos/{video_uuid}/mp4s"
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MP4s>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Project JPEG
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectJpeg(projectUuid: String, videoUuid: String, jpegUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Jpeg?, _ error: Error?) -> Void)) {
        getProjectJpegWithRequestBuilder(projectUuid: projectUuid, videoUuid: videoUuid, jpegUuid: jpegUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Project JPEG
     - GET /media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}
     - 動画（video）から変換されたJPEGデータの情報を取得します。 JPEGファイル自体を取得するには、`GET /media/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip` を使用してください。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - returns: RequestBuilder<Jpeg> 
     */
    open class func getProjectJpegWithRequestBuilder(projectUuid: String, videoUuid: String, jpegUuid: String) -> RequestBuilder<Jpeg> {
        var localVariablePath = "/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let jpegUuidPreEscape = "\(APIHelper.mapValueToPathItem(jpegUuid))"
        let jpegUuidPostEscape = jpegUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jpeg_uuid}", with: jpegUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Jpeg>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Project JPEG as zip
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - parameter indexes: (query) 取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectJpegAsZip(projectUuid: String, videoUuid: String, jpegUuid: String, indexes: [Int]? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        getProjectJpegAsZipWithRequestBuilder(projectUuid: projectUuid, videoUuid: videoUuid, jpegUuid: jpegUuid, indexes: indexes).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Project JPEG as zip
     - GET /media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip
     - JPEGデータをZIPファイルにまとめた形で取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter jpegUuid: (path) JPEGのUUID 
     - parameter indexes: (query) 取得したいJPEGのインデックス番号（最初の番号は1）。指定がない場合はすべて取得します。 &#x60;indexes&#x60; パラメーターを複数回指定することで、複数のJPEGファイルを取得することができます。 (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func getProjectJpegAsZipWithRequestBuilder(projectUuid: String, videoUuid: String, jpegUuid: String, indexes: [Int]? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/media/projects/{project_uuid}/videos/{video_uuid}/jpegs/{jpeg_uuid}/images/selected.zip"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let jpegUuidPreEscape = "\(APIHelper.mapValueToPathItem(jpegUuid))"
        let jpegUuidPostEscape = jpegUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jpeg_uuid}", with: jpegUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "indexes": indexes?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Project JPEGs
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectJpegs(projectUuid: String, videoUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Jpegs?, _ error: Error?) -> Void)) {
        getProjectJpegsWithRequestBuilder(projectUuid: projectUuid, videoUuid: videoUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Project JPEGs
     - GET /media/projects/{project_uuid}/videos/{video_uuid}/jpegs
     - 動画（video）から変換されたJPEGデータのリストを取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - returns: RequestBuilder<Jpegs> 
     */
    open class func getProjectJpegsWithRequestBuilder(projectUuid: String, videoUuid: String) -> RequestBuilder<Jpegs> {
        var localVariablePath = "/media/projects/{project_uuid}/videos/{video_uuid}/jpegs"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Jpegs>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Project MP4
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter mp4Uuid: (path) MP4のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectMP4(projectUuid: String, videoUuid: String, mp4Uuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MP4?, _ error: Error?) -> Void)) {
        getProjectMP4WithRequestBuilder(projectUuid: projectUuid, videoUuid: videoUuid, mp4Uuid: mp4Uuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Project MP4
     - GET /media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}
     - 動画（video）から変換されたMP4データの情報を取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter mp4Uuid: (path) MP4のUUID 
     - returns: RequestBuilder<MP4> 
     */
    open class func getProjectMP4WithRequestBuilder(projectUuid: String, videoUuid: String, mp4Uuid: String) -> RequestBuilder<MP4> {
        var localVariablePath = "/media/projects/{project_uuid}/videos/{video_uuid}/mp4s/{mp4_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let mp4UuidPreEscape = "\(APIHelper.mapValueToPathItem(mp4Uuid))"
        let mp4UuidPostEscape = mp4UuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mp4_uuid}", with: mp4UuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MP4>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Project MP4s
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectMP4s(projectUuid: String, videoUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MP4s?, _ error: Error?) -> Void)) {
        getProjectMP4sWithRequestBuilder(projectUuid: projectUuid, videoUuid: videoUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Project MP4s
     - GET /media/projects/{project_uuid}/videos/{video_uuid}/mp4s
     - 動画（video）から変換されたMP4データのリストを取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - returns: RequestBuilder<MP4s> 
     */
    open class func getProjectMP4sWithRequestBuilder(projectUuid: String, videoUuid: String) -> RequestBuilder<MP4s> {
        var localVariablePath = "/media/projects/{project_uuid}/videos/{video_uuid}/mp4s"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MP4s>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Project Video
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectVideo(projectUuid: String, videoUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Video?, _ error: Error?) -> Void)) {
        getProjectVideoWithRequestBuilder(projectUuid: projectUuid, videoUuid: videoUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Project Video
     - GET /media/projects/{project_uuid}/videos/{video_uuid}
     - 動画を取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - returns: RequestBuilder<Video> 
     */
    open class func getProjectVideoWithRequestBuilder(projectUuid: String, videoUuid: String) -> RequestBuilder<Video> {
        var localVariablePath = "/media/projects/{project_uuid}/videos/{video_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Video>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Project Videos
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter uuid: (query) 動画（video）のUUID (optional)
     - parameter measUuid: (query) 計測のUUID (optional)
     - parameter channel: (query) チャンネル (optional)
     - parameter sort: (query) 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to "create_at+")
     - parameter page: (query) 取得するページ番号 (optional, default to 1)
     - parameter perPage: (query) 1回のリクエストで取得する件数 (optional, default to 100)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectVideos(projectUuid: String, uuid: String? = nil, measUuid: String? = nil, channel: Int? = nil, sort: String? = nil, page: Int? = nil, perPage: Int? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Videos?, _ error: Error?) -> Void)) {
        getProjectVideosWithRequestBuilder(projectUuid: projectUuid, uuid: uuid, measUuid: measUuid, channel: channel, sort: sort, page: page, perPage: perPage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Project Videos
     - GET /media/projects/{project_uuid}/videos
     - 動画（video）のリストを取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter uuid: (query) 動画（video）のUUID (optional)
     - parameter measUuid: (query) 計測のUUID (optional)
     - parameter channel: (query) チャンネル (optional)
     - parameter sort: (query) 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to "create_at+")
     - parameter page: (query) 取得するページ番号 (optional, default to 1)
     - parameter perPage: (query) 1回のリクエストで取得する件数 (optional, default to 100)
     - returns: RequestBuilder<Videos> 
     */
    open class func getProjectVideosWithRequestBuilder(projectUuid: String, uuid: String? = nil, measUuid: String? = nil, channel: Int? = nil, sort: String? = nil, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<Videos> {
        var localVariablePath = "/media/projects/{project_uuid}/videos"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "uuid": uuid?.encodeToJSON(),
            "meas_uuid": measUuid?.encodeToJSON(),
            "channel": channel?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Videos>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Video
     
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVideo(videoUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Video?, _ error: Error?) -> Void)) {
        getVideoWithRequestBuilder(videoUuid: videoUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Video
     - GET /media/videos/{video_uuid}
     - 動画を取得します。
     - parameter videoUuid: (path) 変換元の動画（video）のUUID 
     - returns: RequestBuilder<Video> 
     */
    open class func getVideoWithRequestBuilder(videoUuid: String) -> RequestBuilder<Video> {
        var localVariablePath = "/media/videos/{video_uuid}"
        let videoUuidPreEscape = "\(APIHelper.mapValueToPathItem(videoUuid))"
        let videoUuidPostEscape = videoUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{video_uuid}", with: videoUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Video>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Videos
     
     - parameter uuid: (query) 動画（video）のUUID (optional)
     - parameter measUuid: (query) 計測のUUID (optional)
     - parameter channel: (query) チャンネル (optional)
     - parameter sort: (query) 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to "create_at+")
     - parameter page: (query) 取得するページ番号 (optional, default to 1)
     - parameter perPage: (query) 1回のリクエストで取得する件数 (optional, default to 100)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVideos(uuid: String? = nil, measUuid: String? = nil, channel: Int? = nil, sort: String? = nil, page: Int? = nil, perPage: Int? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Videos?, _ error: Error?) -> Void)) {
        getVideosWithRequestBuilder(uuid: uuid, measUuid: measUuid, channel: channel, sort: sort, page: page, perPage: perPage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Videos
     - GET /media/videos
     - 動画（video）のリストを取得します。
     - parameter uuid: (query) 動画（video）のUUID (optional)
     - parameter measUuid: (query) 計測のUUID (optional)
     - parameter channel: (query) チャンネル (optional)
     - parameter sort: (query) 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。    - &#x60;channel&#x60;   - &#x60;created_at&#x60;   - &#x60;updated_at&#x60; (optional, default to "create_at+")
     - parameter page: (query) 取得するページ番号 (optional, default to 1)
     - parameter perPage: (query) 1回のリクエストで取得する件数 (optional, default to 100)
     - returns: RequestBuilder<Videos> 
     */
    open class func getVideosWithRequestBuilder(uuid: String? = nil, measUuid: String? = nil, channel: Int? = nil, sort: String? = nil, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<Videos> {
        let localVariablePath = "/media/videos"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "uuid": uuid?.encodeToJSON(),
            "meas_uuid": measUuid?.encodeToJSON(),
            "channel": channel?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Videos>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
