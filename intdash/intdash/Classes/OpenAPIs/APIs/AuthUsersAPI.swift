//
// AuthUsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthUsersAPI {

    /**
     Assign Role
     
     - parameter userUuid: (path)  
     - parameter roleUuid: (path) ロールのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func assignRole(userUuid: String, roleUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Role?, _ error: Error?) -> Void)) {
        assignRoleWithRequestBuilder(userUuid: userUuid, roleUuid: roleUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Assign Role
     - PUT /auth/users/{user_uuid}/roles/{role_uuid}
     - ユーザーにロールを割り当てます。
     - parameter userUuid: (path)  
     - parameter roleUuid: (path) ロールのUUID 
     - returns: RequestBuilder<Role> 
     */
    open class func assignRoleWithRequestBuilder(userUuid: String, roleUuid: String) -> RequestBuilder<Role> {
        var localVariablePath = "/auth/users/{user_uuid}/roles/{role_uuid}"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let roleUuidPreEscape = "\(APIHelper.mapValueToPathItem(roleUuid))"
        let roleUuidPostEscape = roleUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{role_uuid}", with: roleUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Role>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create API Token
     
     - parameter userUuid: (path)  
     - parameter createUserAPITokenRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createAPIToken(userUuid: String, createUserAPITokenRequest: CreateUserAPITokenRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserAPIToken?, _ error: Error?) -> Void)) {
        createAPITokenWithRequestBuilder(userUuid: userUuid, createUserAPITokenRequest: createUserAPITokenRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create API Token
     - POST /auth/users/{user_uuid}/tokens
     - ユーザーのAPIトークンを作成します。
     - parameter userUuid: (path)  
     - parameter createUserAPITokenRequest: (body)  (optional)
     - returns: RequestBuilder<UserAPIToken> 
     */
    open class func createAPITokenWithRequestBuilder(userUuid: String, createUserAPITokenRequest: CreateUserAPITokenRequest? = nil) -> RequestBuilder<UserAPIToken> {
        var localVariablePath = "/auth/users/{user_uuid}/tokens"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createUserAPITokenRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserAPIToken>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Email
     
     - parameter userUuid: (path)  
     - parameter createEmailRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createEmail(userUuid: String, createEmailRequest: CreateEmailRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserEmail?, _ error: Error?) -> Void)) {
        createEmailWithRequestBuilder(userUuid: userUuid, createEmailRequest: createEmailRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Email
     - POST /auth/users/{user_uuid}/emails
     - ユーザーのメールアドレスを設定します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
     - parameter userUuid: (path)  
     - parameter createEmailRequest: (body)  (optional)
     - returns: RequestBuilder<UserEmail> 
     */
    open class func createEmailWithRequestBuilder(userUuid: String, createEmailRequest: CreateEmailRequest? = nil) -> RequestBuilder<UserEmail> {
        var localVariablePath = "/auth/users/{user_uuid}/emails"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createEmailRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserEmail>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Temporary Password
     
     - parameter userUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createTemporaryPassword(userUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserPassword?, _ error: Error?) -> Void)) {
        createTemporaryPasswordWithRequestBuilder(userUuid: userUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Temporary Password
     - PUT /auth/users/{user_uuid}/password
     - ユーザーのパスワードを、ランダムな一時パスワードに変更します。
     - parameter userUuid: (path)  
     - returns: RequestBuilder<UserPassword> 
     */
    open class func createTemporaryPasswordWithRequestBuilder(userUuid: String) -> RequestBuilder<UserPassword> {
        var localVariablePath = "/auth/users/{user_uuid}/password"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPassword>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create User
     
     - parameter createUserRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUser(createUserRequest: CreateUserRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: User?, _ error: Error?) -> Void)) {
        createUserWithRequestBuilder(createUserRequest: createUserRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create User
     - POST /auth/users
     - ユーザーを作成します。新しいユーザーには自動生成された一時パスワードが設定されます。 ユーザー作成のリクエストにメールアドレス（ `email` ）が含まれていた場合は、 そのメールアドレスに確認メールが送信されます。
     - parameter createUserRequest: (body)  (optional)
     - returns: RequestBuilder<User> 
     */
    open class func createUserWithRequestBuilder(createUserRequest: CreateUserRequest? = nil) -> RequestBuilder<User> {
        let localVariablePath = "/auth/users"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete API Token
     
     - parameter userUuid: (path)  
     - parameter userApiTokenId: (path) APIトークンのID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAPIToken(userUuid: String, userApiTokenId: Int64, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteAPITokenWithRequestBuilder(userUuid: userUuid, userApiTokenId: userApiTokenId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete API Token
     - DELETE /auth/users/{user_uuid}/tokens/{user_api_token_id}
     - ユーザーのAPIトークンを削除します。
     - parameter userUuid: (path)  
     - parameter userApiTokenId: (path) APIトークンのID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteAPITokenWithRequestBuilder(userUuid: String, userApiTokenId: Int64) -> RequestBuilder<Void> {
        var localVariablePath = "/auth/users/{user_uuid}/tokens/{user_api_token_id}"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let userApiTokenIdPreEscape = "\(APIHelper.mapValueToPathItem(userApiTokenId))"
        let userApiTokenIdPostEscape = userApiTokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_api_token_id}", with: userApiTokenIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete Email
     
     - parameter userUuid: (path)  
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteEmail(userUuid: String, userEmailId: Int64, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteEmailWithRequestBuilder(userUuid: userUuid, userEmailId: userEmailId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Email
     - DELETE /auth/users/{user_uuid}/emails/{user_email_id}
     - ユーザーのメールアドレスを削除します。
     - parameter userUuid: (path)  
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteEmailWithRequestBuilder(userUuid: String, userEmailId: Int64) -> RequestBuilder<Void> {
        var localVariablePath = "/auth/users/{user_uuid}/emails/{user_email_id}"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let userEmailIdPreEscape = "\(APIHelper.mapValueToPathItem(userEmailId))"
        let userEmailIdPostEscape = userEmailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_email_id}", with: userEmailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete User
     
     - parameter userUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteUser(userUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteUserWithRequestBuilder(userUuid: userUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete User
     - DELETE /auth/users/{user_uuid}
     - ユーザーを削除します。
     - parameter userUuid: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteUserWithRequestBuilder(userUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/auth/users/{user_uuid}"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Disable User
     
     - parameter userUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disableUser(userUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: User?, _ error: Error?) -> Void)) {
        disableUserWithRequestBuilder(userUuid: userUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Disable User
     - PUT /auth/users/{user_uuid}/disable
     - ユーザーを無効化します。
     - parameter userUuid: (path)  
     - returns: RequestBuilder<User> 
     */
    open class func disableUserWithRequestBuilder(userUuid: String) -> RequestBuilder<User> {
        var localVariablePath = "/auth/users/{user_uuid}/disable"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Enable User
     
     - parameter userUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func enableUser(userUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: User?, _ error: Error?) -> Void)) {
        enableUserWithRequestBuilder(userUuid: userUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Enable User
     - PUT /auth/users/{user_uuid}/enable
     - ユーザーを有効化します。
     - parameter userUuid: (path)  
     - returns: RequestBuilder<User> 
     */
    open class func enableUserWithRequestBuilder(userUuid: String) -> RequestBuilder<User> {
        var localVariablePath = "/auth/users/{user_uuid}/enable"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get User
     
     - parameter userUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUser(userUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: User?, _ error: Error?) -> Void)) {
        getUserWithRequestBuilder(userUuid: userUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get User
     - GET /auth/users/{user_uuid}
     - ユーザーを取得します。
     - parameter userUuid: (path)  
     - returns: RequestBuilder<User> 
     */
    open class func getUserWithRequestBuilder(userUuid: String) -> RequestBuilder<User> {
        var localVariablePath = "/auth/users/{user_uuid}"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Introspect API Token
     
     - parameter aPITokenIntrospectionRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func introspectAPIToken(aPITokenIntrospectionRequest: APITokenIntrospectionRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: APITokenIntrospectionResponse?, _ error: Error?) -> Void)) {
        introspectAPITokenWithRequestBuilder(aPITokenIntrospectionRequest: aPITokenIntrospectionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Introspect API Token
     - POST /auth/users/tokens/introspection
     - APIトークンの検証を行います。
     - parameter aPITokenIntrospectionRequest: (body)  (optional)
     - returns: RequestBuilder<APITokenIntrospectionResponse> 
     */
    open class func introspectAPITokenWithRequestBuilder(aPITokenIntrospectionRequest: APITokenIntrospectionRequest? = nil) -> RequestBuilder<APITokenIntrospectionResponse> {
        let localVariablePath = "/auth/users/tokens/introspection"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: aPITokenIntrospectionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<APITokenIntrospectionResponse>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List API Tokens
     
     - parameter userUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listAPITokens(userUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserAPITokens?, _ error: Error?) -> Void)) {
        listAPITokensWithRequestBuilder(userUuid: userUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List API Tokens
     - GET /auth/users/{user_uuid}/tokens
     - ユーザーのAPIトークンのリストを取得します。
     - parameter userUuid: (path)  
     - returns: RequestBuilder<UserAPITokens> 
     */
    open class func listAPITokensWithRequestBuilder(userUuid: String) -> RequestBuilder<UserAPITokens> {
        var localVariablePath = "/auth/users/{user_uuid}/tokens"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserAPITokens>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Users
     
     - parameter uuid: (query) ユーザーのUUID (optional)
     - parameter roleUuid: (query) ロールのUUID (optional)
     - parameter name: (query) ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     - parameter nickname: (query) ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     - parameter email: (query) メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     - parameter disabled: (query) * &#x60;true&#x60; を指定した場合、無効化されているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、有効なユーザーのみを取得します。 * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。 (optional)
     - parameter isSuper: (query) * &#x60;true&#x60; を指定した場合、スーパーユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、スーパーユーザー以外を取得します。 * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。 (optional)
     - parameter isTemporary: (query) * &#x60;true&#x60; を指定した場合、一時パスワードを使用しているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、パスワードを設定済みのユーザーのみを取得します。 * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。 (optional)
     - parameter minSignInAttemptCount: (query) ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。 (optional)
     - parameter maxSignInAttemptCount: (query) ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。 (optional)
     - parameter sort: (query) 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at   - last_sign_in_at (optional, default to "name+")
     - parameter page: (query) 取得するページの番号 (optional, default to 1)
     - parameter perPage: (query) 1回のリクエストで取得する件数 (optional, default to 30)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listUsers(uuid: [String]? = nil, roleUuid: [String]? = nil, name: [String]? = nil, nickname: [String]? = nil, email: [String]? = nil, disabled: Bool? = nil, isSuper: Bool? = nil, isTemporary: Bool? = nil, minSignInAttemptCount: Int? = nil, maxSignInAttemptCount: Int? = nil, sort: String? = nil, page: Int? = nil, perPage: Int? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Users?, _ error: Error?) -> Void)) {
        listUsersWithRequestBuilder(uuid: uuid, roleUuid: roleUuid, name: name, nickname: nickname, email: email, disabled: disabled, isSuper: isSuper, isTemporary: isTemporary, minSignInAttemptCount: minSignInAttemptCount, maxSignInAttemptCount: maxSignInAttemptCount, sort: sort, page: page, perPage: perPage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Users
     - GET /auth/users
     - ユーザーのリストを取得します。
     - parameter uuid: (query) ユーザーのUUID (optional)
     - parameter roleUuid: (query) ロールのUUID (optional)
     - parameter name: (query) ユーザーの名前による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     - parameter nickname: (query) ユーザーの表示名による部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     - parameter email: (query) メールアドレスによる部分一致検索。文字列をダブルクォーテーションで囲むと、完全一致のものだけを取得します。 (optional)
     - parameter disabled: (query) * &#x60;true&#x60; を指定した場合、無効化されているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、有効なユーザーのみを取得します。 * 指定を省略した場合、有効／無効にかかわらずユーザーを取得します。 (optional)
     - parameter isSuper: (query) * &#x60;true&#x60; を指定した場合、スーパーユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、スーパーユーザー以外を取得します。 * 指定を省略した場合、スーパーユーザーであるかにかかわらずユーザーを取得します。 (optional)
     - parameter isTemporary: (query) * &#x60;true&#x60; を指定した場合、一時パスワードを使用しているユーザーのみを取得します。 * &#x60;false&#x60; を指定した場合、パスワードを設定済みのユーザーのみを取得します。 * 指定を省略した場合、一時パスワードを使用しているかにかかわらずユーザーを取得します。 (optional)
     - parameter minSignInAttemptCount: (query) ログイン失敗回数の最小値。ログイン失敗回数がこの数値以上のユーザーを取得します。 (optional)
     - parameter maxSignInAttemptCount: (query) ログイン失敗回数の最大値。ログイン失敗回数がこの数値以下のユーザーを取得します。 (optional)
     - parameter sort: (query) 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at   - last_sign_in_at (optional, default to "name+")
     - parameter page: (query) 取得するページの番号 (optional, default to 1)
     - parameter perPage: (query) 1回のリクエストで取得する件数 (optional, default to 30)
     - returns: RequestBuilder<Users> 
     */
    open class func listUsersWithRequestBuilder(uuid: [String]? = nil, roleUuid: [String]? = nil, name: [String]? = nil, nickname: [String]? = nil, email: [String]? = nil, disabled: Bool? = nil, isSuper: Bool? = nil, isTemporary: Bool? = nil, minSignInAttemptCount: Int? = nil, maxSignInAttemptCount: Int? = nil, sort: String? = nil, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<Users> {
        let localVariablePath = "/auth/users"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "uuid": uuid?.encodeToJSON(),
            "role_uuid": roleUuid?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "nickname": nickname?.encodeToJSON(),
            "email": email?.encodeToJSON(),
            "disabled": disabled?.encodeToJSON(),
            "is_super": isSuper?.encodeToJSON(),
            "is_temporary": isTemporary?.encodeToJSON(),
            "min_sign_in_attempt_count": minSignInAttemptCount?.encodeToJSON(),
            "max_sign_in_attempt_count": maxSignInAttemptCount?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Users>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List User's Roles
     
     - parameter userUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listUsersRoles(userUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Roles?, _ error: Error?) -> Void)) {
        listUsersRolesWithRequestBuilder(userUuid: userUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List User's Roles
     - GET /auth/users/{user_uuid}/roles
     - ユーザーのロールのリストを取得します。
     - parameter userUuid: (path)  
     - returns: RequestBuilder<Roles> 
     */
    open class func listUsersRolesWithRequestBuilder(userUuid: String) -> RequestBuilder<Roles> {
        var localVariablePath = "/auth/users/{user_uuid}/roles"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Roles>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Send Verification Email
     
     - parameter userUuid: (path)  
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func sendVerificationEmail(userUuid: String, userEmailId: Int64, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserEmailVerification?, _ error: Error?) -> Void)) {
        sendVerificationEmailWithRequestBuilder(userUuid: userUuid, userEmailId: userEmailId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Send Verification Email
     - PUT /auth/users/{user_uuid}/emails/{user_email_id}/verification
     - メールアドレスを確認するため確認メールを送信します。メールアドレス確認用トークンを使用します。
     - parameter userUuid: (path)  
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - returns: RequestBuilder<UserEmailVerification> 
     */
    open class func sendVerificationEmailWithRequestBuilder(userUuid: String, userEmailId: Int64) -> RequestBuilder<UserEmailVerification> {
        var localVariablePath = "/auth/users/{user_uuid}/emails/{user_email_id}/verification"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let userEmailIdPreEscape = "\(APIHelper.mapValueToPathItem(userEmailId))"
        let userEmailIdPostEscape = userEmailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_email_id}", with: userEmailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserEmailVerification>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unassign Role
     
     - parameter userUuid: (path)  
     - parameter roleUuid: (path) ロールのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unassignRole(userUuid: String, roleUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        unassignRoleWithRequestBuilder(userUuid: userUuid, roleUuid: roleUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unassign Role
     - DELETE /auth/users/{user_uuid}/roles/{role_uuid}
     - ユーザーへのロールの割り当てを解除します。
     - parameter userUuid: (path)  
     - parameter roleUuid: (path) ロールのUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func unassignRoleWithRequestBuilder(userUuid: String, roleUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/auth/users/{user_uuid}/roles/{role_uuid}"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let roleUuidPreEscape = "\(APIHelper.mapValueToPathItem(roleUuid))"
        let roleUuidPostEscape = roleUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{role_uuid}", with: roleUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unlock Password
     
     - parameter userUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unlockPassword(userUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserPassword?, _ error: Error?) -> Void)) {
        unlockPasswordWithRequestBuilder(userUuid: userUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unlock Password
     - PUT /auth/users/{user_uuid}/password/unlock
     - ユーザーのパスワードのロックを解除します。このユーザーのログイン失敗回数は0にリセットされます。
     - parameter userUuid: (path)  
     - returns: RequestBuilder<UserPassword> 
     */
    open class func unlockPasswordWithRequestBuilder(userUuid: String) -> RequestBuilder<UserPassword> {
        var localVariablePath = "/auth/users/{user_uuid}/password/unlock"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserPassword>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update API Token
     
     - parameter userUuid: (path)  
     - parameter userApiTokenId: (path) APIトークンのID 
     - parameter updateUserAPITokenRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateAPIToken(userUuid: String, userApiTokenId: Int64, updateUserAPITokenRequest: UpdateUserAPITokenRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserAPIToken?, _ error: Error?) -> Void)) {
        updateAPITokenWithRequestBuilder(userUuid: userUuid, userApiTokenId: userApiTokenId, updateUserAPITokenRequest: updateUserAPITokenRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update API Token
     - PATCH /auth/users/{user_uuid}/tokens/{user_api_token_id}
     - ユーザーのAPIトークンを更新します。
     - parameter userUuid: (path)  
     - parameter userApiTokenId: (path) APIトークンのID 
     - parameter updateUserAPITokenRequest: (body)  (optional)
     - returns: RequestBuilder<UserAPIToken> 
     */
    open class func updateAPITokenWithRequestBuilder(userUuid: String, userApiTokenId: Int64, updateUserAPITokenRequest: UpdateUserAPITokenRequest? = nil) -> RequestBuilder<UserAPIToken> {
        var localVariablePath = "/auth/users/{user_uuid}/tokens/{user_api_token_id}"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let userApiTokenIdPreEscape = "\(APIHelper.mapValueToPathItem(userApiTokenId))"
        let userApiTokenIdPostEscape = userApiTokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_api_token_id}", with: userApiTokenIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateUserAPITokenRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserAPIToken>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update Email
     
     - parameter userUuid: (path)  
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - parameter patchEmailRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateEmail(userUuid: String, userEmailId: Int64, patchEmailRequest: PatchEmailRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserEmail?, _ error: Error?) -> Void)) {
        updateEmailWithRequestBuilder(userUuid: userUuid, userEmailId: userEmailId, patchEmailRequest: patchEmailRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Email
     - PATCH /auth/users/{user_uuid}/emails/{user_email_id}
     - ユーザーのメールアドレスを更新します。 メールアドレスの設定が成功すると、確認用URLを含むメールがそのアドレスに送信されます。 確認用URLには、メールアドレス確認用トークンとメールアドレスのIDが含まれます。
     - parameter userUuid: (path)  
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - parameter patchEmailRequest: (body)  (optional)
     - returns: RequestBuilder<UserEmail> 
     */
    open class func updateEmailWithRequestBuilder(userUuid: String, userEmailId: Int64, patchEmailRequest: PatchEmailRequest? = nil) -> RequestBuilder<UserEmail> {
        var localVariablePath = "/auth/users/{user_uuid}/emails/{user_email_id}"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let userEmailIdPreEscape = "\(APIHelper.mapValueToPathItem(userEmailId))"
        let userEmailIdPostEscape = userEmailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_email_id}", with: userEmailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchEmailRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserEmail>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Set Email as Verified
     
     - parameter userUuid: (path)  
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - parameter updateEmailVerifiedRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateToVerified(userUuid: String, userEmailId: Int64, updateEmailVerifiedRequest: UpdateEmailVerifiedRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: UserEmail?, _ error: Error?) -> Void)) {
        updateToVerifiedWithRequestBuilder(userUuid: userUuid, userEmailId: userEmailId, updateEmailVerifiedRequest: updateEmailVerifiedRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set Email as Verified
     - PUT /auth/users/{user_uuid}/emails/{user_email_id}/verified
     - ユーザーのメールアドレスを確認済みにします。
     - parameter userUuid: (path)  
     - parameter userEmailId: (path) ユーザーのメールアドレスのID 
     - parameter updateEmailVerifiedRequest: (body)  (optional)
     - returns: RequestBuilder<UserEmail> 
     */
    open class func updateToVerifiedWithRequestBuilder(userUuid: String, userEmailId: Int64, updateEmailVerifiedRequest: UpdateEmailVerifiedRequest? = nil) -> RequestBuilder<UserEmail> {
        var localVariablePath = "/auth/users/{user_uuid}/emails/{user_email_id}/verified"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let userEmailIdPreEscape = "\(APIHelper.mapValueToPathItem(userEmailId))"
        let userEmailIdPostEscape = userEmailIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_email_id}", with: userEmailIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateEmailVerifiedRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserEmail>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update User
     
     - parameter userUuid: (path)  
     - parameter patchUserRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUser(userUuid: String, patchUserRequest: PatchUserRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: User?, _ error: Error?) -> Void)) {
        updateUserWithRequestBuilder(userUuid: userUuid, patchUserRequest: patchUserRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update User
     - PATCH /auth/users/{user_uuid}
     - ユーザーを更新します。
     - parameter userUuid: (path)  
     - parameter patchUserRequest: (body)  (optional)
     - returns: RequestBuilder<User> 
     */
    open class func updateUserWithRequestBuilder(userUuid: String, patchUserRequest: PatchUserRequest? = nil) -> RequestBuilder<User> {
        var localVariablePath = "/auth/users/{user_uuid}"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<User>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
