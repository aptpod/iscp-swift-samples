//
// AuthOAuth2API.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthOAuth2API {

    /**
     List JSON Web Keys
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func authOauth2JwksGet(apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2JWKs?, _ error: Error?) -> Void)) {
        authOauth2JwksGetWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List JSON Web Keys
     - GET /auth/oauth2/jwks
     - JSON Web Keysのリストを取得します。 [RFC7517:JSON Web Key](https://tools.ietf.org/html/rfc7517)
     - returns: RequestBuilder<OAuth2JWKs> 
     */
    open class func authOauth2JwksGetWithRequestBuilder() -> RequestBuilder<OAuth2JWKs> {
        let localVariablePath = "/auth/oauth2/jwks"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2JWKs>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter grantType
     */
    public enum GrantType_issueToken: String, CaseIterable {
        case password = "password"
        case authorizationCode = "authorization_code"
        case refreshToken = "refresh_token"
        case clientCredentials = "client_credentials"
    }

    /**
     Token Endpoint
     
     - parameter grantType: (form) グラントタイプ (optional)
     - parameter refreshToken: (form) 認可時に発行されたリフレッシュトークン。grant_typeが &#x60;refresh_token&#x60; の場合にだけ指定します。 (optional)
     - parameter tenantUuid: (form) テナントのUUID。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 grant_typeが &#x60;password&#x60; で、テナントUUIDを省略した場合は、デフォルトのテナントが使用されます。 (optional, default to "00000000-0000-0000-0000-000000000000")
     - parameter username: (form) ユーザーの名前。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)
     - parameter password: (form) パスワード。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)
     - parameter clientId: (form) OAuth2クライアントのID (optional)
     - parameter clientSecret: (form) OAuth2のクライアントシークレット。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;client_secret_post&#x60; の場合にだけ指定します。 (optional)
     - parameter clientCertification: (form) OAuth2のクライアント証明書。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;tls_client_auth&#x60; の場合にだけ指定します。 (optional)
     - parameter redirectUri: (form) 認可後のリダイレクト先URI。 grant_typeが &#x60;authorization_code&#x60; の場合にだけ必要です。 (optional)
     - parameter codeVerifier: (form) PKCE code verifier.  * 使用可能な文字:  &#x60;[a-Z] / [0-9] / \\\&quot;-\\\&quot; / \\\&quot;.\\\&quot; / \\\&quot;_\\\&quot; / \\\&quot;~\\\&quot;&#x60;  * 長さ: 43文字以上、128文字以下 (optional)
     - parameter code: (form) 認可コード (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueToken(grantType: GrantType_issueToken? = nil, refreshToken: String? = nil, tenantUuid: String? = nil, username: String? = nil, password: String? = nil, clientId: String? = nil, clientSecret: String? = nil, clientCertification: String? = nil, redirectUri: String? = nil, codeVerifier: String? = nil, code: String? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: InlineResponse200?, _ error: Error?) -> Void)) {
        issueTokenWithRequestBuilder(grantType: grantType, refreshToken: refreshToken, tenantUuid: tenantUuid, username: username, password: password, clientId: clientId, clientSecret: clientSecret, clientCertification: clientCertification, redirectUri: redirectUri, codeVerifier: codeVerifier, code: code).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Token Endpoint
     - POST /auth/oauth2/token
     - OAuth2のアクセストークンを取得します。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
     - parameter grantType: (form) グラントタイプ (optional)
     - parameter refreshToken: (form) 認可時に発行されたリフレッシュトークン。grant_typeが &#x60;refresh_token&#x60; の場合にだけ指定します。 (optional)
     - parameter tenantUuid: (form) テナントのUUID。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 grant_typeが &#x60;password&#x60; で、テナントUUIDを省略した場合は、デフォルトのテナントが使用されます。 (optional, default to "00000000-0000-0000-0000-000000000000")
     - parameter username: (form) ユーザーの名前。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)
     - parameter password: (form) パスワード。grant_typeが &#x60;password&#x60; の場合にだけ指定します。 (optional)
     - parameter clientId: (form) OAuth2クライアントのID (optional)
     - parameter clientSecret: (form) OAuth2のクライアントシークレット。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;client_secret_post&#x60; の場合にだけ指定します。 (optional)
     - parameter clientCertification: (form) OAuth2のクライアント証明書。 OAuth2クライアントの &#x60;token_endpoint_auth_method&#x60; が &#x60;tls_client_auth&#x60; の場合にだけ指定します。 (optional)
     - parameter redirectUri: (form) 認可後のリダイレクト先URI。 grant_typeが &#x60;authorization_code&#x60; の場合にだけ必要です。 (optional)
     - parameter codeVerifier: (form) PKCE code verifier.  * 使用可能な文字:  &#x60;[a-Z] / [0-9] / \\\&quot;-\\\&quot; / \\\&quot;.\\\&quot; / \\\&quot;_\\\&quot; / \\\&quot;~\\\&quot;&#x60;  * 長さ: 43文字以上、128文字以下 (optional)
     - parameter code: (form) 認可コード (optional)
     - returns: RequestBuilder<InlineResponse200> 
     */
    open class func issueTokenWithRequestBuilder(grantType: GrantType_issueToken? = nil, refreshToken: String? = nil, tenantUuid: String? = nil, username: String? = nil, password: String? = nil, clientId: String? = nil, clientSecret: String? = nil, clientCertification: String? = nil, redirectUri: String? = nil, codeVerifier: String? = nil, code: String? = nil) -> RequestBuilder<InlineResponse200> {
        let localVariablePath = "/auth/oauth2/token"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "grant_type": grantType?.encodeToJSON(),
            "refresh_token": refreshToken?.encodeToJSON(),
            "tenant_uuid": tenantUuid?.encodeToJSON(),
            "username": username?.encodeToJSON(),
            "password": password?.encodeToJSON(),
            "client_id": clientId?.encodeToJSON(),
            "client_secret": clientSecret?.encodeToJSON(),
            "client_certification": clientCertification?.encodeToJSON(),
            "redirect_uri": redirectUri?.encodeToJSON(),
            "code_verifier": codeVerifier?.encodeToJSON(),
            "code": code?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InlineResponse200>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter responseType
     */
    public enum ResponseType_oauth2Authorization: String, CaseIterable {
        case code = "code"
    }

    /**
     * enum for parameter codeChallengeMethod
     */
    public enum CodeChallengeMethod_oauth2Authorization: String, CaseIterable {
        case s256 = "S256"
    }

    /**
     Authorization Endpoint
     
     - parameter clientId: (query) OAuth2クライアントID 
     - parameter responseType: (query) OAuth2のresponse_type。 &#x60;code&#x60; のみサポートされています。 
     - parameter redirectUri: (query) 認可後のリダイレクト先URI 
     - parameter state: (query) CSRF対策のためのstate 
     - parameter codeChallenge: (query) PKCEコードチャレンジ。 &#x60;code_verifier&#x60; から計算したSHA-256ハッシュを、Base64 URLエンコードしたもの。 (optional)
     - parameter codeChallengeMethod: (query) PKCEコードチャレンジの方式。 &#x60;S256&#x60; （SHA-256）のみサポートされます。 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func oauth2Authorization(clientId: String, responseType: ResponseType_oauth2Authorization, redirectUri: String, state: String, codeChallenge: String? = nil, codeChallengeMethod: CodeChallengeMethod_oauth2Authorization? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        oauth2AuthorizationWithRequestBuilder(clientId: clientId, responseType: responseType, redirectUri: redirectUri, state: state, codeChallenge: codeChallenge, codeChallengeMethod: codeChallengeMethod).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Authorization Endpoint
     - GET /auth/oauth2/authorization
     - OAuth2認可エンドポイント。 [RFC6749:The OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749)
     - parameter clientId: (query) OAuth2クライアントID 
     - parameter responseType: (query) OAuth2のresponse_type。 &#x60;code&#x60; のみサポートされています。 
     - parameter redirectUri: (query) 認可後のリダイレクト先URI 
     - parameter state: (query) CSRF対策のためのstate 
     - parameter codeChallenge: (query) PKCEコードチャレンジ。 &#x60;code_verifier&#x60; から計算したSHA-256ハッシュを、Base64 URLエンコードしたもの。 (optional)
     - parameter codeChallengeMethod: (query) PKCEコードチャレンジの方式。 &#x60;S256&#x60; （SHA-256）のみサポートされます。 (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func oauth2AuthorizationWithRequestBuilder(clientId: String, responseType: ResponseType_oauth2Authorization, redirectUri: String, state: String, codeChallenge: String? = nil, codeChallengeMethod: CodeChallengeMethod_oauth2Authorization? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/auth/oauth2/authorization"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "client_id": clientId.encodeToJSON(),
            "response_type": responseType.encodeToJSON(),
            "redirect_uri": redirectUri.encodeToJSON(),
            "state": state.encodeToJSON(),
            "code_challenge": codeChallenge?.encodeToJSON(),
            "code_challenge_method": codeChallengeMethod?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter tokenTypeHint
     */
    public enum TokenTypeHint_reovokeToken: String, CaseIterable {
        case accessToken = "access_token"
        case refreshToken = "refresh_token"
    }

    /**
     Revoke Token
     
     - parameter clientId: (form) OAuth2クライアントID 
     - parameter tokenTypeHint: (form) OAuth2トークンタイプについてのヒント (optional, default to .refreshToken)
     - parameter token: (form) 無効化したいリフレッシュトークンまたはアクセストークン。 指定を省略した場合、サーバーは、cookieの &#x60;_bearer_token&#x60; に指定されたアクセストークン、または、Authorizationヘッダーに指定されたアクセストークン（ &#x60;Bearer&#x60; トークン）を無効化します。 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reovokeToken(clientId: String, tokenTypeHint: TokenTypeHint_reovokeToken? = nil, token: String? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        reovokeTokenWithRequestBuilder(clientId: clientId, tokenTypeHint: tokenTypeHint, token: token).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Revoke Token
     - POST /auth/oauth2/revocation
     - トークンを無効化します。 このエンドポイントをコールしてからトークンが無効化されるまで、通常数秒程度かかります。 [RFC7009:OAuth 2.0 Token Revocation](https://tools.ietf.org/html/rfc7009)
     - parameter clientId: (form) OAuth2クライアントID 
     - parameter tokenTypeHint: (form) OAuth2トークンタイプについてのヒント (optional, default to .refreshToken)
     - parameter token: (form) 無効化したいリフレッシュトークンまたはアクセストークン。 指定を省略した場合、サーバーは、cookieの &#x60;_bearer_token&#x60; に指定されたアクセストークン、または、Authorizationヘッダーに指定されたアクセストークン（ &#x60;Bearer&#x60; トークン）を無効化します。 (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func reovokeTokenWithRequestBuilder(clientId: String, tokenTypeHint: TokenTypeHint_reovokeToken? = nil, token: String? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/auth/oauth2/revocation"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "client_id": clientId.encodeToJSON(),
            "token_type_hint": tokenTypeHint?.encodeToJSON(),
            "token": token?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
