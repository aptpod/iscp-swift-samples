//
// MeasMeasurementMarkersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MeasMeasurementMarkersAPI {

    /**
     Create Measurement Marker by Measurement UUID
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerPostRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createMeasurementMarker(measurementUuid: String, measurementMarkerPostRequest: MeasurementMarkerPostRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementMarker?, _ error: Error?) -> Void)) {
        createMeasurementMarkerWithRequestBuilder(measurementUuid: measurementUuid, measurementMarkerPostRequest: measurementMarkerPostRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Measurement Marker by Measurement UUID
     - POST /v1/measurements/{measurement_uuid}/markers
     - 計測マーカーを作成します。
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerPostRequest: (body)  (optional)
     - returns: RequestBuilder<MeasurementMarker> 
     */
    open class func createMeasurementMarkerWithRequestBuilder(measurementUuid: String, measurementMarkerPostRequest: MeasurementMarkerPostRequest? = nil) -> RequestBuilder<MeasurementMarker> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/markers"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measurementMarkerPostRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementMarker>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Project Measurement Marker by Measurement UUID
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerPostRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createProjectMeasurementMarker(projectUuid: String, measurementUuid: String, measurementMarkerPostRequest: MeasurementMarkerPostRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementMarker?, _ error: Error?) -> Void)) {
        createProjectMeasurementMarkerWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid, measurementMarkerPostRequest: measurementMarkerPostRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Project Measurement Marker by Measurement UUID
     - POST /v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers
     - 計測マーカーを作成します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerPostRequest: (body)  (optional)
     - returns: RequestBuilder<MeasurementMarker> 
     */
    open class func createProjectMeasurementMarkerWithRequestBuilder(projectUuid: String, measurementUuid: String, measurementMarkerPostRequest: MeasurementMarkerPostRequest? = nil) -> RequestBuilder<MeasurementMarker> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measurementMarkerPostRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementMarker>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete Measurement Marker
     
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMeasurementMarker(measurementMarkerUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteMeasurementMarkerWithRequestBuilder(measurementMarkerUuid: measurementMarkerUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Measurement Marker
     - DELETE /v1/measurements/markers/{measurement_marker_uuid}
     - 計測マーカーを削除します。
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMeasurementMarkerWithRequestBuilder(measurementMarkerUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/measurements/markers/{measurement_marker_uuid}"
        let measurementMarkerUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementMarkerUuid))"
        let measurementMarkerUuidPostEscape = measurementMarkerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_marker_uuid}", with: measurementMarkerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete Measurement Marker using Measurement UUID
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(measurementUuid: String, measurementMarkerUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithRequestBuilder(measurementUuid: measurementUuid, measurementMarkerUuid: measurementMarkerUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Measurement Marker using Measurement UUID
     - DELETE /v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}
     - 計測マーカーを削除します。
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithRequestBuilder(measurementUuid: String, measurementMarkerUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let measurementMarkerUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementMarkerUuid))"
        let measurementMarkerUuidPostEscape = measurementMarkerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_marker_uuid}", with: measurementMarkerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete Measurement Markers by Measurement UUID
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMeasurementMarkers(measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteMeasurementMarkersWithRequestBuilder(measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Measurement Markers by Measurement UUID
     - DELETE /v1/measurements/{measurement_uuid}/markers
     - 計測マーカーを削除します。
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMeasurementMarkersWithRequestBuilder(measurementUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/markers"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete Project Measurement Marker
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteProjectMeasurementMarker(projectUuid: String, measurementMarkerUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteProjectMeasurementMarkerWithRequestBuilder(projectUuid: projectUuid, measurementMarkerUuid: measurementMarkerUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Project Measurement Marker
     - DELETE /v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}
     - 計測マーカーを削除します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProjectMeasurementMarkerWithRequestBuilder(projectUuid: String, measurementMarkerUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementMarkerUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementMarkerUuid))"
        let measurementMarkerUuidPostEscape = measurementMarkerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_marker_uuid}", with: measurementMarkerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete Project Measurement Marker using Measurement UUID
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(projectUuid: String, measurementUuid: String, measurementMarkerUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid, measurementMarkerUuid: measurementMarkerUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Project Measurement Marker using Measurement UUID
     - DELETE /v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}
     - 計測マーカーを削除します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithRequestBuilder(projectUuid: String, measurementUuid: String, measurementMarkerUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let measurementMarkerUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementMarkerUuid))"
        let measurementMarkerUuidPostEscape = measurementMarkerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_marker_uuid}", with: measurementMarkerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete Project Measurement Markers by Measurement UUID
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteProjectMeasurementMarkers(projectUuid: String, measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteProjectMeasurementMarkersWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Project Measurement Markers by Measurement UUID
     - DELETE /v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers
     - 計測マーカーを削除します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProjectMeasurementMarkersWithRequestBuilder(projectUuid: String, measurementUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Measurement Marker
     
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMeasurementMarker(measurementMarkerUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementMarker?, _ error: Error?) -> Void)) {
        getMeasurementMarkerWithRequestBuilder(measurementMarkerUuid: measurementMarkerUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Measurement Marker
     - GET /v1/measurements/markers/{measurement_marker_uuid}
     - 計測マーカーを取得します。
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - returns: RequestBuilder<MeasurementMarker> 
     */
    open class func getMeasurementMarkerWithRequestBuilder(measurementMarkerUuid: String) -> RequestBuilder<MeasurementMarker> {
        var localVariablePath = "/v1/measurements/markers/{measurement_marker_uuid}"
        let measurementMarkerUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementMarkerUuid))"
        let measurementMarkerUuidPostEscape = measurementMarkerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_marker_uuid}", with: measurementMarkerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementMarker>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Measurement Marker using Measurement UUID
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(measurementUuid: String, measurementMarkerUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementMarker?, _ error: Error?) -> Void)) {
        getMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithRequestBuilder(measurementUuid: measurementUuid, measurementMarkerUuid: measurementMarkerUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Measurement Marker using Measurement UUID
     - GET /v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}
     - **Deprecated** このエンドポイントではなく、 `GET /measurements/{measurement_uuid}` を使用してください。
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - returns: RequestBuilder<MeasurementMarker> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithRequestBuilder(measurementUuid: String, measurementMarkerUuid: String) -> RequestBuilder<MeasurementMarker> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let measurementMarkerUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementMarkerUuid))"
        let measurementMarkerUuidPostEscape = measurementMarkerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_marker_uuid}", with: measurementMarkerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementMarker>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Measurement Markers by Measurement UUID
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getMeasurementMarkersWithMeasurementUUID(measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementMarkersWithoutPage?, _ error: Error?) -> Void)) {
        getMeasurementMarkersWithMeasurementUUIDWithRequestBuilder(measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Measurement Markers by Measurement UUID
     - GET /v1/measurements/{measurement_uuid}/markers
     - (**Deprecated** このエンドポイントではなく、 `GET /measurements/{measurement_uuid}` を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<MeasurementMarkersWithoutPage> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getMeasurementMarkersWithMeasurementUUIDWithRequestBuilder(measurementUuid: String) -> RequestBuilder<MeasurementMarkersWithoutPage> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/markers"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementMarkersWithoutPage>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Project Measurement Marker
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectMeasurementMarker(projectUuid: String, measurementMarkerUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementMarker?, _ error: Error?) -> Void)) {
        getProjectMeasurementMarkerWithRequestBuilder(projectUuid: projectUuid, measurementMarkerUuid: measurementMarkerUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Project Measurement Marker
     - GET /v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}
     - 計測マーカーを取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - returns: RequestBuilder<MeasurementMarker> 
     */
    open class func getProjectMeasurementMarkerWithRequestBuilder(projectUuid: String, measurementMarkerUuid: String) -> RequestBuilder<MeasurementMarker> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementMarkerUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementMarkerUuid))"
        let measurementMarkerUuidPostEscape = measurementMarkerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_marker_uuid}", with: measurementMarkerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementMarker>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Project Measurement Marker using Measurement UUID
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(projectUuid: String, measurementUuid: String, measurementMarkerUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementMarker?, _ error: Error?) -> Void)) {
        getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid, measurementMarkerUuid: measurementMarkerUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Project Measurement Marker using Measurement UUID
     - GET /v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}
     - **Deprecated** このエンドポイントではなく、 `GET /measurements/{measurement_uuid}` を使用してください。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - returns: RequestBuilder<MeasurementMarker> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithRequestBuilder(projectUuid: String, measurementUuid: String, measurementMarkerUuid: String) -> RequestBuilder<MeasurementMarker> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let measurementMarkerUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementMarkerUuid))"
        let measurementMarkerUuidPostEscape = measurementMarkerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_marker_uuid}", with: measurementMarkerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementMarker>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Project Measurement Markers by Measurement UUID
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getProjectMeasurementMarkersWithMeasurementUUID(projectUuid: String, measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementMarkersWithoutPage?, _ error: Error?) -> Void)) {
        getProjectMeasurementMarkersWithMeasurementUUIDWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Project Measurement Markers by Measurement UUID
     - GET /v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers
     - (**Deprecated** このエンドポイントではなく、 `GET /measurements/{measurement_uuid}` を使用してください。) 計測UUIDを指定して、その計測に付与されたマーカーの一覧を取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<MeasurementMarkersWithoutPage> 
     */
    @available(*, deprecated, message: "This operation is deprecated.")
    open class func getProjectMeasurementMarkersWithMeasurementUUIDWithRequestBuilder(projectUuid: String, measurementUuid: String) -> RequestBuilder<MeasurementMarkersWithoutPage> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementMarkersWithoutPage>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_listMeasurementMarkers: String, CaseIterable {
        case name = "name"
        case baseTime = "base_time"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    /**
     * enum for parameter order
     */
    public enum Order_listMeasurementMarkers: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List Measurement Markers
     
     - parameter uuid: (query) 計測マーカーのUUID (optional)
     - parameter name: (query) 計測マーカーの名前 (optional)
     - parameter startUnixMicro: (query) Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)
     - parameter endUnixMicro: (query) Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)
     - parameter tagKey: (query) タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | ------------------ | ---------------- |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)
     - parameter tagKey2: (query) タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数 (optional)
     - parameter sort: (query) 並べ替えに使用するキー (optional, default to .baseTime)
     - parameter page: (query) 取得するページの番号 (optional)
     - parameter order: (query) 並べ替えの順序 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listMeasurementMarkers(uuid: [String]? = nil, name: [String]? = nil, startUnixMicro: Int64? = nil, endUnixMicro: Int64? = nil, tagKey: [String]? = nil, tagKey2: [String]? = nil, limit: Int? = nil, sort: Sort_listMeasurementMarkers? = nil, page: Int? = nil, order: Order_listMeasurementMarkers? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementMarkers?, _ error: Error?) -> Void)) {
        listMeasurementMarkersWithRequestBuilder(uuid: uuid, name: name, startUnixMicro: startUnixMicro, endUnixMicro: endUnixMicro, tagKey: tagKey, tagKey2: tagKey2, limit: limit, sort: sort, page: page, order: order).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Measurement Markers
     - GET /v1/measurements/markers
     - 計測マーカーのリストを取得します。
     - parameter uuid: (query) 計測マーカーのUUID (optional)
     - parameter name: (query) 計測マーカーの名前 (optional)
     - parameter startUnixMicro: (query) Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)
     - parameter endUnixMicro: (query) Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)
     - parameter tagKey: (query) タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | ------------------ | ---------------- |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)
     - parameter tagKey2: (query) タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数 (optional)
     - parameter sort: (query) 並べ替えに使用するキー (optional, default to .baseTime)
     - parameter page: (query) 取得するページの番号 (optional)
     - parameter order: (query) 並べ替えの順序 (optional)
     - returns: RequestBuilder<MeasurementMarkers> 
     */
    open class func listMeasurementMarkersWithRequestBuilder(uuid: [String]? = nil, name: [String]? = nil, startUnixMicro: Int64? = nil, endUnixMicro: Int64? = nil, tagKey: [String]? = nil, tagKey2: [String]? = nil, limit: Int? = nil, sort: Sort_listMeasurementMarkers? = nil, page: Int? = nil, order: Order_listMeasurementMarkers? = nil) -> RequestBuilder<MeasurementMarkers> {
        let localVariablePath = "/v1/measurements/markers"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "uuid": uuid?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "start_unix_micro": startUnixMicro?.encodeToJSON(),
            "end_unix_micro": endUnixMicro?.encodeToJSON(),
            "tag.&lt;key&gt;": tagKey?.encodeToJSON(),
            "!tag.&lt;key&gt;": tagKey2?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementMarkers>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_listProjectMeasurementMarkers: String, CaseIterable {
        case name = "name"
        case baseTime = "base_time"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    /**
     * enum for parameter order
     */
    public enum Order_listProjectMeasurementMarkers: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List Project Measurement Markers
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter uuid: (query) 計測マーカーのUUID (optional)
     - parameter name: (query) 計測マーカーの名前 (optional)
     - parameter startUnixMicro: (query) Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)
     - parameter endUnixMicro: (query) Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)
     - parameter tagKey: (query) タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | ------------------ | ---------------- |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)
     - parameter tagKey2: (query) タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数 (optional)
     - parameter sort: (query) 並べ替えに使用するキー (optional, default to .baseTime)
     - parameter page: (query) 取得するページの番号 (optional)
     - parameter order: (query) 並べ替えの順序 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listProjectMeasurementMarkers(projectUuid: String, uuid: [String]? = nil, name: [String]? = nil, startUnixMicro: Int64? = nil, endUnixMicro: Int64? = nil, tagKey: [String]? = nil, tagKey2: [String]? = nil, limit: Int? = nil, sort: Sort_listProjectMeasurementMarkers? = nil, page: Int? = nil, order: Order_listProjectMeasurementMarkers? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementMarkers?, _ error: Error?) -> Void)) {
        listProjectMeasurementMarkersWithRequestBuilder(projectUuid: projectUuid, uuid: uuid, name: name, startUnixMicro: startUnixMicro, endUnixMicro: endUnixMicro, tagKey: tagKey, tagKey2: tagKey2, limit: limit, sort: sort, page: page, order: order).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Project Measurement Markers
     - GET /v1/projects/{project_uuid}/measurements/markers
     - 計測マーカーのリストを取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter uuid: (query) 計測マーカーのUUID (optional)
     - parameter name: (query) 計測マーカーの名前 (optional)
     - parameter startUnixMicro: (query) Get MeasMarkers which start Meas.BaseTime + elapsed_time &amp;lt;&#x3D; this[usec]. (optional)
     - parameter endUnixMicro: (query) Get MeasMarkers which start this[usec] &amp;lt; Meas.BaseTime + elapsed_time. (optional)
     - parameter tagKey: (query) タグのキーと値を使って条件を指定し、条件に一致する計測マーカーを取得します。 キーのみを指定した場合は、指定されたキーを持つ計測マーカーを取得します。 キーと値を指定した場合は、指定されたキーを持ち、その値として指定された値を含む計測マーカーを取得します。 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; 条件は複数個指定することができ、OR条件で使用されます。 ただし &#x60;!tag.&lt;key&gt;&#x60; と組み合わせた場合、  &#x60;!tag.&lt;key&gt;&#x60; が優先されます。  例:      | measurement marker | tag (key: value) |     | ------------------ | ---------------- |     | 1                  | a: value1        |     |                    | c: value2        |     |                    | e: 1             |      | 2                  | a: b             |     |                    | c: d             |      | 3                  | a: b             |    -  &#x60;?tag.e&#x3D;&#x60; の場合、計測マーカー1番が取得されます。   -  &#x60;?!tag.c&#x3D;&#x60; の場合、計測マーカー3番が取得されます。   -  &#x60;?tag.a&#x3D;&amp;!tag.e&#x3D;&#x60; の場合、計測マーカー2、3番が取得されます。   -  &#x60;?tag.a&#x3D;val&amp;tag.c&#x3D;d&#x60; の場合、計測マーカー1、2番が取得されます。 (optional)
     - parameter tagKey2: (query) タグのキーを使って条件を指定し、条件に一致する計測キャプチャを除外します。 タグの値は無視されます。 &#x60;!tag.&lt;key&gt;&#x60; を複数個指定した場合、AND条件となります。 また、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60; と組み合わせて使用した場合、 &#x60;tag.&lt;key&gt;&#x3D;&lt;value&gt;&#x60;  よりも &#x60;!tag.&lt;key&gt;&#x60; が優先されます。 例: 上の &#x60;tag.&lt;key&gt;&#x60; の説明を参照してください。 (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数 (optional)
     - parameter sort: (query) 並べ替えに使用するキー (optional, default to .baseTime)
     - parameter page: (query) 取得するページの番号 (optional)
     - parameter order: (query) 並べ替えの順序 (optional)
     - returns: RequestBuilder<MeasurementMarkers> 
     */
    open class func listProjectMeasurementMarkersWithRequestBuilder(projectUuid: String, uuid: [String]? = nil, name: [String]? = nil, startUnixMicro: Int64? = nil, endUnixMicro: Int64? = nil, tagKey: [String]? = nil, tagKey2: [String]? = nil, limit: Int? = nil, sort: Sort_listProjectMeasurementMarkers? = nil, page: Int? = nil, order: Order_listProjectMeasurementMarkers? = nil) -> RequestBuilder<MeasurementMarkers> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/markers"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "uuid": uuid?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "start_unix_micro": startUnixMicro?.encodeToJSON(),
            "end_unix_micro": endUnixMicro?.encodeToJSON(),
            "tag.&lt;key&gt;": tagKey?.encodeToJSON(),
            "!tag.&lt;key&gt;": tagKey2?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementMarkers>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update Measurement Marker
     
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter measurementMarkerPutRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMeasurementMarker(measurementMarkerUuid: String, measurementMarkerPutRequest: MeasurementMarkerPutRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementMarker?, _ error: Error?) -> Void)) {
        updateMeasurementMarkerWithRequestBuilder(measurementMarkerUuid: measurementMarkerUuid, measurementMarkerPutRequest: measurementMarkerPutRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Measurement Marker
     - PUT /v1/measurements/markers/{measurement_marker_uuid}
     - 計測マーカーを更新します。
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter measurementMarkerPutRequest: (body)  (optional)
     - returns: RequestBuilder<MeasurementMarker> 
     */
    open class func updateMeasurementMarkerWithRequestBuilder(measurementMarkerUuid: String, measurementMarkerPutRequest: MeasurementMarkerPutRequest? = nil) -> RequestBuilder<MeasurementMarker> {
        var localVariablePath = "/v1/measurements/markers/{measurement_marker_uuid}"
        let measurementMarkerUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementMarkerUuid))"
        let measurementMarkerUuidPostEscape = measurementMarkerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_marker_uuid}", with: measurementMarkerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measurementMarkerPutRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementMarker>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Replace Measurement Marker using Measurement UUID
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter measurementMarkerPutRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(measurementUuid: String, measurementMarkerUuid: String, measurementMarkerPutRequest: MeasurementMarkerPutRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementMarker?, _ error: Error?) -> Void)) {
        updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithRequestBuilder(measurementUuid: measurementUuid, measurementMarkerUuid: measurementMarkerUuid, measurementMarkerPutRequest: measurementMarkerPutRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Replace Measurement Marker using Measurement UUID
     - PUT /v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}
     - 計測マーカーの情報を更新します。
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter measurementMarkerPutRequest: (body)  (optional)
     - returns: RequestBuilder<MeasurementMarker> 
     */
    open class func updateMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithRequestBuilder(measurementUuid: String, measurementMarkerUuid: String, measurementMarkerPutRequest: MeasurementMarkerPutRequest? = nil) -> RequestBuilder<MeasurementMarker> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let measurementMarkerUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementMarkerUuid))"
        let measurementMarkerUuidPostEscape = measurementMarkerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_marker_uuid}", with: measurementMarkerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measurementMarkerPutRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementMarker>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update Project Measurement Marker
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter measurementMarkerPutRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProjectMeasurementMarker(projectUuid: String, measurementMarkerUuid: String, measurementMarkerPutRequest: MeasurementMarkerPutRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementMarker?, _ error: Error?) -> Void)) {
        updateProjectMeasurementMarkerWithRequestBuilder(projectUuid: projectUuid, measurementMarkerUuid: measurementMarkerUuid, measurementMarkerPutRequest: measurementMarkerPutRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Project Measurement Marker
     - PUT /v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}
     - 計測マーカーを更新します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter measurementMarkerPutRequest: (body)  (optional)
     - returns: RequestBuilder<MeasurementMarker> 
     */
    open class func updateProjectMeasurementMarkerWithRequestBuilder(projectUuid: String, measurementMarkerUuid: String, measurementMarkerPutRequest: MeasurementMarkerPutRequest? = nil) -> RequestBuilder<MeasurementMarker> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/markers/{measurement_marker_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementMarkerUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementMarkerUuid))"
        let measurementMarkerUuidPostEscape = measurementMarkerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_marker_uuid}", with: measurementMarkerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measurementMarkerPutRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementMarker>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Replace Project Measurement Marker using Measurement UUID
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter measurementMarkerPutRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUID(projectUuid: String, measurementUuid: String, measurementMarkerUuid: String, measurementMarkerPutRequest: MeasurementMarkerPutRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementMarker?, _ error: Error?) -> Void)) {
        updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid, measurementMarkerUuid: measurementMarkerUuid, measurementMarkerPutRequest: measurementMarkerPutRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Replace Project Measurement Marker using Measurement UUID
     - PUT /v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}
     - 計測マーカーの情報を更新します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter measurementMarkerPutRequest: (body)  (optional)
     - returns: RequestBuilder<MeasurementMarker> 
     */
    open class func updateProjectMeasurementMarkerWithMeasurementUUIDAndMarkerUUIDWithRequestBuilder(projectUuid: String, measurementUuid: String, measurementMarkerUuid: String, measurementMarkerPutRequest: MeasurementMarkerPutRequest? = nil) -> RequestBuilder<MeasurementMarker> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/markers/{measurement_marker_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let measurementMarkerUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementMarkerUuid))"
        let measurementMarkerUuidPostEscape = measurementMarkerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_marker_uuid}", with: measurementMarkerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measurementMarkerPutRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementMarker>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
