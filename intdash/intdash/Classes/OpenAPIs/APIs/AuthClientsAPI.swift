//
// AuthClientsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthClientsAPI {

    /**
     Create My OAuth2Client
     
     - parameter createMyOAuth2ClientRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createMyOAuth2Clients(createMyOAuth2ClientRequest: CreateMyOAuth2ClientRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2ClientWithSecret?, _ error: Error?) -> Void)) {
        createMyOAuth2ClientsWithRequestBuilder(createMyOAuth2ClientRequest: createMyOAuth2ClientRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create My OAuth2Client
     - POST /auth/users/me/clients
     - 自分（ユーザー）のOAuth2クライアントを作成します。
     - parameter createMyOAuth2ClientRequest: (body)  (optional)
     - returns: RequestBuilder<OAuth2ClientWithSecret> 
     */
    open class func createMyOAuth2ClientsWithRequestBuilder(createMyOAuth2ClientRequest: CreateMyOAuth2ClientRequest? = nil) -> RequestBuilder<OAuth2ClientWithSecret> {
        let localVariablePath = "/auth/users/me/clients"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createMyOAuth2ClientRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2ClientWithSecret>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete My OAuth2Client
     
     - parameter clientId: (path) OAuth2クライアントID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMyOAuth2Client(clientId: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteMyOAuth2ClientWithRequestBuilder(clientId: clientId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete My OAuth2Client
     - DELETE /auth/users/me/clients/{client_id}
     - 自分（ユーザー）のOAuth2クライアントを削除します。
     - parameter clientId: (path) OAuth2クライアントID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMyOAuth2ClientWithRequestBuilder(clientId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/auth/users/me/clients/{client_id}"
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_id}", with: clientIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete OAuth2Client
     
     - parameter clientId: (path) OAuth2クライアントID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteOAuth2Client(clientId: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteOAuth2ClientWithRequestBuilder(clientId: clientId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete OAuth2Client
     - DELETE /auth/clients/{client_id}
     - OAuth2クライアントを削除します。
     - parameter clientId: (path) OAuth2クライアントID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteOAuth2ClientWithRequestBuilder(clientId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/auth/clients/{client_id}"
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_id}", with: clientIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get My OAuth2Client
     
     - parameter clientId: (path) OAuth2クライアントID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMyOAuth2Client(clientId: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Client?, _ error: Error?) -> Void)) {
        getMyOAuth2ClientWithRequestBuilder(clientId: clientId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get My OAuth2Client
     - GET /auth/users/me/clients/{client_id}
     - 自分（ユーザー）のOAuth2クライアントを取得します。
     - parameter clientId: (path) OAuth2クライアントID 
     - returns: RequestBuilder<OAuth2Client> 
     */
    open class func getMyOAuth2ClientWithRequestBuilder(clientId: String) -> RequestBuilder<OAuth2Client> {
        var localVariablePath = "/auth/users/me/clients/{client_id}"
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_id}", with: clientIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Client>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get OAuth2Client
     
     - parameter clientId: (path) OAuth2クライアントID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getOAuth2Client(clientId: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Client?, _ error: Error?) -> Void)) {
        getOAuth2ClientWithRequestBuilder(clientId: clientId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get OAuth2Client
     - GET /auth/clients/{client_id}
     - OAuth2クライアントを取得します。
     - parameter clientId: (path) OAuth2クライアントID 
     - returns: RequestBuilder<OAuth2Client> 
     */
    open class func getOAuth2ClientWithRequestBuilder(clientId: String) -> RequestBuilder<OAuth2Client> {
        var localVariablePath = "/auth/clients/{client_id}"
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_id}", with: clientIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Client>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List My OAuth2Clients
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listMyOAuth2Clients(apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Clients?, _ error: Error?) -> Void)) {
        listMyOAuth2ClientsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List My OAuth2Clients
     - GET /auth/users/me/clients
     - 自分（ユーザー）のOAuth2クライアントのリストを取得します。
     - returns: RequestBuilder<OAuth2Clients> 
     */
    open class func listMyOAuth2ClientsWithRequestBuilder() -> RequestBuilder<OAuth2Clients> {
        let localVariablePath = "/auth/users/me/clients"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Clients>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List OAuth2Clients
     
     - parameter id: (query) OAuth2クライアントID (optional)
     - parameter name: (query) 名前による部分一致検索 (optional)
     - parameter sort: (query) 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at (optional, default to "name+")
     - parameter page: (query) 取得するページの番号 (optional, default to 1)
     - parameter perPage: (query) 1回のリクエストで取得する件数 (optional, default to 30)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listOAuth2Clients(id: [String]? = nil, name: [String]? = nil, sort: String? = nil, page: Int? = nil, perPage: Int? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Clients?, _ error: Error?) -> Void)) {
        listOAuth2ClientsWithRequestBuilder(id: id, name: name, sort: sort, page: page, perPage: perPage).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List OAuth2Clients
     - GET /auth/clients
     - OAuth2クライアントのリストを取得します。
     - parameter id: (query) OAuth2クライアントID (optional)
     - parameter name: (query) 名前による部分一致検索 (optional)
     - parameter sort: (query) 並べ替えに使用するキー。接尾辞 &#x60;+&#x60; を付けた場合は昇順、 &#x60;-&#x60; を付けた場合は降順で出力されます。 接尾辞を省略した場合は昇順となります。 例えば、 &#x60;name-&#x60; を指定すると、nameによる降順で出力されます。   - name   - created_at   - updated_at (optional, default to "name+")
     - parameter page: (query) 取得するページの番号 (optional, default to 1)
     - parameter perPage: (query) 1回のリクエストで取得する件数 (optional, default to 30)
     - returns: RequestBuilder<OAuth2Clients> 
     */
    open class func listOAuth2ClientsWithRequestBuilder(id: [String]? = nil, name: [String]? = nil, sort: String? = nil, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<OAuth2Clients> {
        let localVariablePath = "/auth/clients"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": id?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "per_page": perPage?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Clients>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List User's OAuth2Clients
     
     - parameter userUuid: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listUsersOAuth2Clients(userUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Clients?, _ error: Error?) -> Void)) {
        listUsersOAuth2ClientsWithRequestBuilder(userUuid: userUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List User's OAuth2Clients
     - GET /auth/users/{user_uuid}/clients
     - ユーザーのOAuth2クライアントのリストを取得します。
     - parameter userUuid: (path)  
     - returns: RequestBuilder<OAuth2Clients> 
     */
    open class func listUsersOAuth2ClientsWithRequestBuilder(userUuid: String) -> RequestBuilder<OAuth2Clients> {
        var localVariablePath = "/auth/users/{user_uuid}/clients"
        let userUuidPreEscape = "\(APIHelper.mapValueToPathItem(userUuid))"
        let userUuidPostEscape = userUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_uuid}", with: userUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Clients>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update My OAuth2Client
     
     - parameter clientId: (path) OAuth2クライアントID 
     - parameter updateOAuth2ClientRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMyOAuth2Client(clientId: String, updateOAuth2ClientRequest: UpdateOAuth2ClientRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Client?, _ error: Error?) -> Void)) {
        updateMyOAuth2ClientWithRequestBuilder(clientId: clientId, updateOAuth2ClientRequest: updateOAuth2ClientRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update My OAuth2Client
     - PATCH /auth/users/me/clients/{client_id}
     - 自分（ユーザー）のOAuth2クライアントを更新します。
     - parameter clientId: (path) OAuth2クライアントID 
     - parameter updateOAuth2ClientRequest: (body)  (optional)
     - returns: RequestBuilder<OAuth2Client> 
     */
    open class func updateMyOAuth2ClientWithRequestBuilder(clientId: String, updateOAuth2ClientRequest: UpdateOAuth2ClientRequest? = nil) -> RequestBuilder<OAuth2Client> {
        var localVariablePath = "/auth/users/me/clients/{client_id}"
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_id}", with: clientIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateOAuth2ClientRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Client>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update OAuth2Client
     
     - parameter clientId: (path) OAuth2クライアントID 
     - parameter updateOAuth2ClientRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateOAuth2Client(clientId: String, updateOAuth2ClientRequest: UpdateOAuth2ClientRequest? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: OAuth2Client?, _ error: Error?) -> Void)) {
        updateOAuth2ClientWithRequestBuilder(clientId: clientId, updateOAuth2ClientRequest: updateOAuth2ClientRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update OAuth2Client
     - PATCH /auth/clients/{client_id}
     - OAuth2クライアントを更新します。
     - parameter clientId: (path) OAuth2クライアントID 
     - parameter updateOAuth2ClientRequest: (body)  (optional)
     - returns: RequestBuilder<OAuth2Client> 
     */
    open class func updateOAuth2ClientWithRequestBuilder(clientId: String, updateOAuth2ClientRequest: UpdateOAuth2ClientRequest? = nil) -> RequestBuilder<OAuth2Client> {
        var localVariablePath = "/auth/clients/{client_id}"
        let clientIdPreEscape = "\(APIHelper.mapValueToPathItem(clientId))"
        let clientIdPostEscape = clientIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{client_id}", with: clientIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateOAuth2ClientRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OAuth2Client>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
