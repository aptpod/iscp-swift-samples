//
// MeasMeasurementsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MeasMeasurementsAPI {

    /**
     Complete Measurement
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func completeMeasurement(measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Measurement?, _ error: Error?) -> Void)) {
        completeMeasurementWithRequestBuilder(measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Complete Measurement
     - PUT /v1/measurements/{measurement_uuid}/complete
     - 計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、 かつ、すべてのデータがサーバーに送信されたことを意味します。
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<Measurement> 
     */
    open class func completeMeasurementWithRequestBuilder(measurementUuid: String) -> RequestBuilder<Measurement> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/complete"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Measurement>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Complete Project Measurement
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func completeProjectMeasurement(projectUuid: String, measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Measurement?, _ error: Error?) -> Void)) {
        completeProjectMeasurementWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Complete Project Measurement
     - PUT /v1/projects/{project_uuid}/measurements/{measurement_uuid}/complete
     - 計測を回収完了（completed）にします。 completedは、エッジでのデータ取得が終了し（ended）、 かつ、すべてのデータがサーバーに送信されたことを意味します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<Measurement> 
     */
    open class func completeProjectMeasurementWithRequestBuilder(projectUuid: String, measurementUuid: String) -> RequestBuilder<Measurement> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/complete"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Measurement>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Measurement
     
     - parameter measCreate: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createMeasurement(measCreate: MeasCreate? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Measurement?, _ error: Error?) -> Void)) {
        createMeasurementWithRequestBuilder(measCreate: measCreate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Measurement
     - POST /v1/measurements
     - 計測を作成します。  - **Note**   - 計測の保護／非保護を切り替える権限を持たないエッジも、     計測作成時は保護された計測を作成することが可能です。
     - parameter measCreate: (body)  (optional)
     - returns: RequestBuilder<Measurement> 
     */
    open class func createMeasurementWithRequestBuilder(measCreate: MeasCreate? = nil) -> RequestBuilder<Measurement> {
        let localVariablePath = "/v1/measurements"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Measurement>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Measurement Sequence Chunk
     
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createMeasurementChunks(body: URL? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        createMeasurementChunksWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Measurement Sequence Chunk
     - POST /v1/measurements/sequences/chunks
     - 計測シーケンスにチャンクを作成します。
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func createMeasurementChunksWithRequestBuilder(body: URL? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/v1/measurements/sequences/chunks"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Measurement with UUID
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measCreate: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createMeasurementWithUUID(measurementUuid: String, measCreate: MeasCreate? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Measurement?, _ error: Error?) -> Void)) {
        createMeasurementWithUUIDWithRequestBuilder(measurementUuid: measurementUuid, measCreate: measCreate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Measurement with UUID
     - POST /v1/measurements/{measurement_uuid}
     - 指定したUUIDの計測を作成します。
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measCreate: (body)  (optional)
     - returns: RequestBuilder<Measurement> 
     */
    open class func createMeasurementWithUUIDWithRequestBuilder(measurementUuid: String, measCreate: MeasCreate? = nil) -> RequestBuilder<Measurement> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Measurement>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Project Measurement
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measCreate: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createProjectMeasurement(projectUuid: String, measCreate: MeasCreate? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Measurement?, _ error: Error?) -> Void)) {
        createProjectMeasurementWithRequestBuilder(projectUuid: projectUuid, measCreate: measCreate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Project Measurement
     - POST /v1/projects/{project_uuid}/measurements
     - 計測を作成します。  - **Note**   - 計測の保護／非保護を切り替える権限を持たないエッジも、     計測作成時は保護された計測を作成することが可能です。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measCreate: (body)  (optional)
     - returns: RequestBuilder<Measurement> 
     */
    open class func createProjectMeasurementWithRequestBuilder(projectUuid: String, measCreate: MeasCreate? = nil) -> RequestBuilder<Measurement> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Measurement>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Project Measurement Sequence Chunk
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createProjectMeasurementChunks(projectUuid: String, body: URL? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        createProjectMeasurementChunksWithRequestBuilder(projectUuid: projectUuid, body: body).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Project Measurement Sequence Chunk
     - POST /v1/projects/{project_uuid}/measurements/sequences/chunks
     - 計測シーケンスにチャンクを作成します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func createProjectMeasurementChunksWithRequestBuilder(projectUuid: String, body: URL? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/sequences/chunks"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create Project Measurement with UUID
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measCreate: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createProjectMeasurementWithUUID(projectUuid: String, measurementUuid: String, measCreate: MeasCreate? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Measurement?, _ error: Error?) -> Void)) {
        createProjectMeasurementWithUUIDWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid, measCreate: measCreate).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Project Measurement with UUID
     - POST /v1/projects/{project_uuid}/measurements/{measurement_uuid}
     - 指定したUUIDの計測を作成します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measCreate: (body)  (optional)
     - returns: RequestBuilder<Measurement> 
     */
    open class func createProjectMeasurementWithUUIDWithRequestBuilder(projectUuid: String, measurementUuid: String, measCreate: MeasCreate? = nil) -> RequestBuilder<Measurement> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measCreate)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Measurement>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Trash Measurement
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMeasurement(measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteMeasurementWithRequestBuilder(measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Trash Measurement
     - DELETE /v1/measurements/{measurement_uuid}
     - 計測を削除します。 - **Note**   - 保護された計測は削除できません。
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMeasurementWithRequestBuilder(measurementUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_deleteMeasurementBaseTime: String, CaseIterable {
        case edgeRtc = "edge_rtc"
        case ntp = "ntp"
        case gps = "gps"
        case apiFirstReceived = "api_first_received"
        case volatile = "volatile"
        case manual = "manual"
    }

    /**
     Delete Measurement Base Time
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter type: (path) 基準時刻のタイプ 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteMeasurementBaseTime(measurementUuid: String, type: ModelType_deleteMeasurementBaseTime, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteMeasurementBaseTimeWithRequestBuilder(measurementUuid: measurementUuid, type: type).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Measurement Base Time
     - DELETE /v1/measurements/{measurement_uuid}/basetimes/{type}
     - 基準時刻を削除します。 指定された基準時刻が使用中の場合（その計測の `basetime_type` として設定されている場合）は、 その基準時刻は削除できません（ステータスコード `409` が返却されます）。 このような場合は、他の基準時刻をその計測の `basetime_type` にしてから、削除したい基準時刻を削除してください。
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter type: (path) 基準時刻のタイプ 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteMeasurementBaseTimeWithRequestBuilder(measurementUuid: String, type: ModelType_deleteMeasurementBaseTime) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/basetimes/{type}"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Trash Project Measurement
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteProjectMeasurement(projectUuid: String, measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteProjectMeasurementWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Trash Project Measurement
     - DELETE /v1/projects/{project_uuid}/measurements/{measurement_uuid}
     - 計測を削除します。 - **Note**   - 保護された計測は削除できません。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProjectMeasurementWithRequestBuilder(projectUuid: String, measurementUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_deleteProjectMeasurementBaseTime: String, CaseIterable {
        case edgeRtc = "edge_rtc"
        case ntp = "ntp"
        case gps = "gps"
        case apiFirstReceived = "api_first_received"
        case volatile = "volatile"
        case manual = "manual"
    }

    /**
     Delete Project Measurement Base Time
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter type: (path) 基準時刻のタイプ 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteProjectMeasurementBaseTime(projectUuid: String, measurementUuid: String, type: ModelType_deleteProjectMeasurementBaseTime, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteProjectMeasurementBaseTimeWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid, type: type).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Project Measurement Base Time
     - DELETE /v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}
     - 基準時刻を削除します。 指定された基準時刻が使用中の場合（その計測の `basetime_type` として設定されている場合）は、 その基準時刻は削除できません（ステータスコード `409` が返却されます）。 このような場合は、他の基準時刻をその計測の `basetime_type` にしてから、削除したい基準時刻を削除してください。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter type: (path) 基準時刻のタイプ 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProjectMeasurementBaseTimeWithRequestBuilder(projectUuid: String, measurementUuid: String, type: ModelType_deleteProjectMeasurementBaseTime) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     End Measurement
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func endMeasurement(measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: SequenceSummary?, _ error: Error?) -> Void)) {
        endMeasurementWithRequestBuilder(measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     End Measurement
     - PUT /v1/measurements/{measurement_uuid}/end
     - 計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。 （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<SequenceSummary> 
     */
    open class func endMeasurementWithRequestBuilder(measurementUuid: String) -> RequestBuilder<SequenceSummary> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/end"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SequenceSummary>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     End Project Measurement
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func endProjectMeasurement(projectUuid: String, measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: SequenceSummary?, _ error: Error?) -> Void)) {
        endProjectMeasurementWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     End Project Measurement
     - PUT /v1/projects/{project_uuid}/measurements/{measurement_uuid}/end
     - 計測終了（ended）とします。endedは、エッジにおけるデータの取得が終了していることを表します。 （サーバーに回収されていないデータがまだエッジに残っている可能性はあります。サーバーへのデータの回収が完了した状態は、completedと呼びます。）
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<SequenceSummary> 
     */
    open class func endProjectMeasurementWithRequestBuilder(projectUuid: String, measurementUuid: String) -> RequestBuilder<SequenceSummary> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/end"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SequenceSummary>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Measurement
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMeasurement(measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Measurement?, _ error: Error?) -> Void)) {
        getMeasurementWithRequestBuilder(measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Measurement
     - GET /v1/measurements/{measurement_uuid}
     - 計測を取得します。
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<Measurement> 
     */
    open class func getMeasurementWithRequestBuilder(measurementUuid: String) -> RequestBuilder<Measurement> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Measurement>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getMeasurementBaseTime: String, CaseIterable {
        case edgeRtc = "edge_rtc"
        case ntp = "ntp"
        case gps = "gps"
        case apiFirstReceived = "api_first_received"
        case volatile = "volatile"
        case manual = "manual"
    }

    /**
     Get Measurement Base Time
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter type: (path) 基準時刻のタイプ 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMeasurementBaseTime(measurementUuid: String, type: ModelType_getMeasurementBaseTime, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasBaseTime?, _ error: Error?) -> Void)) {
        getMeasurementBaseTimeWithRequestBuilder(measurementUuid: measurementUuid, type: type).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Measurement Base Time
     - GET /v1/measurements/{measurement_uuid}/basetimes/{type}
     - 基準時刻タイプを指定して計測の基準時刻を取得します。
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter type: (path) 基準時刻のタイプ 
     - returns: RequestBuilder<MeasBaseTime> 
     */
    open class func getMeasurementBaseTimeWithRequestBuilder(measurementUuid: String, type: ModelType_getMeasurementBaseTime) -> RequestBuilder<MeasBaseTime> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/basetimes/{type}"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasBaseTime>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Measurement from Marker
     
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMeasurementFromMeasurementMarker(measurementMarkerUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Measurement?, _ error: Error?) -> Void)) {
        getMeasurementFromMeasurementMarkerWithRequestBuilder(measurementMarkerUuid: measurementMarkerUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Measurement from Marker
     - GET /v1/measurements/markers/{measurement_marker_uuid}/measurement
     - Get a measurement from a specified marker uuid
     - parameter measurementMarkerUuid: (path) 計測マーカーのUUID 
     - returns: RequestBuilder<Measurement> 
     */
    open class func getMeasurementFromMeasurementMarkerWithRequestBuilder(measurementMarkerUuid: String) -> RequestBuilder<Measurement> {
        var localVariablePath = "/v1/measurements/markers/{measurement_marker_uuid}/measurement"
        let measurementMarkerUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementMarkerUuid))"
        let measurementMarkerUuidPostEscape = measurementMarkerUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_marker_uuid}", with: measurementMarkerUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Measurement>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_getMeasurementSections: String, CaseIterable {
        case processed = "processed"
        case unprocessed = "unprocessed"
        case both = "both"
    }

    /**
     List Measurement Sections
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter filter: (query) 計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to .both)
     - parameter limit: (query) 1回のリクエストで取得する件数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMeasurementSections(measurementUuid: String, filter: Filter_getMeasurementSections? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementSectionsGetResponse?, _ error: Error?) -> Void)) {
        getMeasurementSectionsWithRequestBuilder(measurementUuid: measurementUuid, filter: filter, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Measurement Sections
     - GET /v1/measurements/{measurement_uuid}/sections
     - 計測に含まれるセクションのリストを取得します。
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter filter: (query) 計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to .both)
     - parameter limit: (query) 1回のリクエストで取得する件数 (optional)
     - returns: RequestBuilder<MeasurementSectionsGetResponse> 
     */
    open class func getMeasurementSectionsWithRequestBuilder(measurementUuid: String, filter: Filter_getMeasurementSections? = nil, limit: Int? = nil) -> RequestBuilder<MeasurementSectionsGetResponse> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/sections"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementSectionsGetResponse>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Measurement Sequence
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter sequencesUuid: (path) 計測シーケンスのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getMeasurementSequence(measurementUuid: String, sequencesUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementSequenceGroup?, _ error: Error?) -> Void)) {
        getMeasurementSequenceWithRequestBuilder(measurementUuid: measurementUuid, sequencesUuid: sequencesUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Measurement Sequence
     - GET /v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}
     - 計測シーケンスを取得します。
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter sequencesUuid: (path) 計測シーケンスのUUID 
     - returns: RequestBuilder<MeasurementSequenceGroup> 
     */
    open class func getMeasurementSequenceWithRequestBuilder(measurementUuid: String, sequencesUuid: String) -> RequestBuilder<MeasurementSequenceGroup> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let sequencesUuidPreEscape = "\(APIHelper.mapValueToPathItem(sequencesUuid))"
        let sequencesUuidPostEscape = sequencesUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sequences_uuid}", with: sequencesUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementSequenceGroup>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Project Measurement
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectMeasurement(projectUuid: String, measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Measurement?, _ error: Error?) -> Void)) {
        getProjectMeasurementWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Project Measurement
     - GET /v1/projects/{project_uuid}/measurements/{measurement_uuid}
     - 計測を取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<Measurement> 
     */
    open class func getProjectMeasurementWithRequestBuilder(projectUuid: String, measurementUuid: String) -> RequestBuilder<Measurement> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Measurement>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getProjectMeasurementBaseTime: String, CaseIterable {
        case edgeRtc = "edge_rtc"
        case ntp = "ntp"
        case gps = "gps"
        case apiFirstReceived = "api_first_received"
        case volatile = "volatile"
        case manual = "manual"
    }

    /**
     Get Project Measurement Base Time
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter type: (path) 基準時刻のタイプ 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectMeasurementBaseTime(projectUuid: String, measurementUuid: String, type: ModelType_getProjectMeasurementBaseTime, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasBaseTime?, _ error: Error?) -> Void)) {
        getProjectMeasurementBaseTimeWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid, type: type).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Project Measurement Base Time
     - GET /v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}
     - 基準時刻タイプを指定して計測の基準時刻を取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter type: (path) 基準時刻のタイプ 
     - returns: RequestBuilder<MeasBaseTime> 
     */
    open class func getProjectMeasurementBaseTimeWithRequestBuilder(projectUuid: String, measurementUuid: String, type: ModelType_getProjectMeasurementBaseTime) -> RequestBuilder<MeasBaseTime> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasBaseTime>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter filter
     */
    public enum Filter_getProjectMeasurementSections: String, CaseIterable {
        case processed = "processed"
        case unprocessed = "unprocessed"
        case both = "both"
    }

    /**
     List Project Measurement Sections
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter filter: (query) 計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to .both)
     - parameter limit: (query) 1回のリクエストで取得する件数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectMeasurementSections(projectUuid: String, measurementUuid: String, filter: Filter_getProjectMeasurementSections? = nil, limit: Int? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementSectionsGetResponse?, _ error: Error?) -> Void)) {
        getProjectMeasurementSectionsWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid, filter: filter, limit: limit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Project Measurement Sections
     - GET /v1/projects/{project_uuid}/measurements/{measurement_uuid}/sections
     - 計測に含まれるセクションのリストを取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter filter: (query) 計測セクションの処理ステータス。 &#x60;processed&#x60; （処理済みの計測セクションを取得）、 &#x60;unprocessed&#x60; （未処理の計測セクションを取得）、 &#x60;both&#x60; （両方を取得）のいずれかを選択します。 (optional, default to .both)
     - parameter limit: (query) 1回のリクエストで取得する件数 (optional)
     - returns: RequestBuilder<MeasurementSectionsGetResponse> 
     */
    open class func getProjectMeasurementSectionsWithRequestBuilder(projectUuid: String, measurementUuid: String, filter: Filter_getProjectMeasurementSections? = nil, limit: Int? = nil) -> RequestBuilder<MeasurementSectionsGetResponse> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sections"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementSectionsGetResponse>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Project Measurement Sequence
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter sequencesUuid: (path) 計測シーケンスのUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectMeasurementSequence(projectUuid: String, measurementUuid: String, sequencesUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementSequenceGroup?, _ error: Error?) -> Void)) {
        getProjectMeasurementSequenceWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid, sequencesUuid: sequencesUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Project Measurement Sequence
     - GET /v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}
     - 計測シーケンスを取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter sequencesUuid: (path) 計測シーケンスのUUID 
     - returns: RequestBuilder<MeasurementSequenceGroup> 
     */
    open class func getProjectMeasurementSequenceWithRequestBuilder(projectUuid: String, measurementUuid: String, sequencesUuid: String) -> RequestBuilder<MeasurementSequenceGroup> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let sequencesUuidPreEscape = "\(APIHelper.mapValueToPathItem(sequencesUuid))"
        let sequencesUuidPostEscape = sequencesUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sequences_uuid}", with: sequencesUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementSequenceGroup>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Measurement Base Times
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listMeasurementBaseTimes(measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasBaseTimes?, _ error: Error?) -> Void)) {
        listMeasurementBaseTimesWithRequestBuilder(measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Measurement Base Times
     - GET /v1/measurements/{measurement_uuid}/basetimes
     - 計測の基準時刻のリストを取得します。
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<MeasBaseTimes> 
     */
    open class func listMeasurementBaseTimesWithRequestBuilder(measurementUuid: String) -> RequestBuilder<MeasBaseTimes> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/basetimes"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasBaseTimes>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Measurement Sequences
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listMeasurementSequences(measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementSequenceGroups?, _ error: Error?) -> Void)) {
        listMeasurementSequencesWithRequestBuilder(measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Measurement Sequences
     - GET /v1/measurements/{measurement_uuid}/sequences
     - 計測シーケンスのリストを取得します。
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<MeasurementSequenceGroups> 
     */
    open class func listMeasurementSequencesWithRequestBuilder(measurementUuid: String) -> RequestBuilder<MeasurementSequenceGroups> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/sequences"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementSequenceGroups>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter basetimeType
     */
    public enum BasetimeType_listMeasurements: String, CaseIterable {
        case edgeRtc = "edge_rtc"
        case ntp = "ntp"
        case gps = "gps"
        case apiFirstReceived = "api_first_received"
        case volatile = "volatile"
        case manual = "manual"
    }

    /**
     * enum for parameter status
     */
    public enum Status_listMeasurements: String, CaseIterable {
        case measuring = "measuring"
        case resending = "resending"
        case finished = "finished"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_listMeasurements: String, CaseIterable {
        case name = "name"
        case description = "description"
        case ended = "ended"
        case duration = "duration"
        case baseTime = "base_time"
        case processedRatio = "processed_ratio"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    /**
     * enum for parameter order
     */
    public enum Order_listMeasurements: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List Measurements
     
     - parameter uuid: (query) 計測のUUID (optional)
     - parameter name: (query) 名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)
     - parameter edgeUuid: (query) 計測に関連付けられたエッジのUUID (optional)
     - parameter start: (query) 取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter end: (query) 取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter partialMatch: (query) &#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +--------------+                                    | measurement2 |                                    +--------------+                        | measurement3 |                        +--------------+                                                         time -----------+----------------------------+------------&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)
     - parameter basetimeType: (query) 計測の基準時刻のタイプ (optional)
     - parameter ended: (query) 計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)
     - parameter since: (query) 指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter durationStart: (query) 計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)
     - parameter durationEnd: (query) 計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)
     - parameter status: (query) 計測のステータス (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)
     - parameter sort: (query) 並べ替えに使用するキー (optional, default to .baseTime)
     - parameter page: (query) 取得するページの番号 (optional)
     - parameter order: (query) 並べ替えの順序 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listMeasurements(uuid: [String]? = nil, name: Int? = nil, edgeUuid: String? = nil, start: String? = nil, end: String? = nil, partialMatch: Bool? = nil, basetimeType: BasetimeType_listMeasurements? = nil, ended: Bool? = nil, since: String? = nil, durationStart: Int64? = nil, durationEnd: Int64? = nil, status: [String]? = nil, limit: Int? = nil, sort: Sort_listMeasurements? = nil, page: Int? = nil, order: Order_listMeasurements? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Measurements?, _ error: Error?) -> Void)) {
        listMeasurementsWithRequestBuilder(uuid: uuid, name: name, edgeUuid: edgeUuid, start: start, end: end, partialMatch: partialMatch, basetimeType: basetimeType, ended: ended, since: since, durationStart: durationStart, durationEnd: durationEnd, status: status, limit: limit, sort: sort, page: page, order: order).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Measurements
     - GET /v1/measurements
     - 計測のリストを取得します。
     - parameter uuid: (query) 計測のUUID (optional)
     - parameter name: (query) 名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)
     - parameter edgeUuid: (query) 計測に関連付けられたエッジのUUID (optional)
     - parameter start: (query) 取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter end: (query) 取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter partialMatch: (query) &#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +--------------+                                    | measurement2 |                                    +--------------+                        | measurement3 |                        +--------------+                                                         time -----------+----------------------------+------------&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)
     - parameter basetimeType: (query) 計測の基準時刻のタイプ (optional)
     - parameter ended: (query) 計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)
     - parameter since: (query) 指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter durationStart: (query) 計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)
     - parameter durationEnd: (query) 計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)
     - parameter status: (query) 計測のステータス (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)
     - parameter sort: (query) 並べ替えに使用するキー (optional, default to .baseTime)
     - parameter page: (query) 取得するページの番号 (optional)
     - parameter order: (query) 並べ替えの順序 (optional)
     - returns: RequestBuilder<Measurements> 
     */
    open class func listMeasurementsWithRequestBuilder(uuid: [String]? = nil, name: Int? = nil, edgeUuid: String? = nil, start: String? = nil, end: String? = nil, partialMatch: Bool? = nil, basetimeType: BasetimeType_listMeasurements? = nil, ended: Bool? = nil, since: String? = nil, durationStart: Int64? = nil, durationEnd: Int64? = nil, status: [String]? = nil, limit: Int? = nil, sort: Sort_listMeasurements? = nil, page: Int? = nil, order: Order_listMeasurements? = nil) -> RequestBuilder<Measurements> {
        let localVariablePath = "/v1/measurements"
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "uuid": uuid?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "edge_uuid": edgeUuid?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "end": end?.encodeToJSON(),
            "partial_match": partialMatch?.encodeToJSON(),
            "basetime_type": basetimeType?.encodeToJSON(),
            "ended": ended?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "duration_start": durationStart?.encodeToJSON(),
            "duration_end": durationEnd?.encodeToJSON(),
            "status": status?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Measurements>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Project Measurement Base Times
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listProjectMeasurementBaseTimes(projectUuid: String, measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasBaseTimes?, _ error: Error?) -> Void)) {
        listProjectMeasurementBaseTimesWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Project Measurement Base Times
     - GET /v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes
     - 計測の基準時刻のリストを取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<MeasBaseTimes> 
     */
    open class func listProjectMeasurementBaseTimesWithRequestBuilder(projectUuid: String, measurementUuid: String) -> RequestBuilder<MeasBaseTimes> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasBaseTimes>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List Project Measurement Sequences
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listProjectMeasurementSequences(projectUuid: String, measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementSequenceGroups?, _ error: Error?) -> Void)) {
        listProjectMeasurementSequencesWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Project Measurement Sequences
     - GET /v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences
     - 計測シーケンスのリストを取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<MeasurementSequenceGroups> 
     */
    open class func listProjectMeasurementSequencesWithRequestBuilder(projectUuid: String, measurementUuid: String) -> RequestBuilder<MeasurementSequenceGroups> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementSequenceGroups>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter basetimeType
     */
    public enum BasetimeType_listProjectMeasurements: String, CaseIterable {
        case edgeRtc = "edge_rtc"
        case ntp = "ntp"
        case gps = "gps"
        case apiFirstReceived = "api_first_received"
        case volatile = "volatile"
        case manual = "manual"
    }

    /**
     * enum for parameter status
     */
    public enum Status_listProjectMeasurements: String, CaseIterable {
        case measuring = "measuring"
        case resending = "resending"
        case finished = "finished"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_listProjectMeasurements: String, CaseIterable {
        case name = "name"
        case description = "description"
        case ended = "ended"
        case duration = "duration"
        case baseTime = "base_time"
        case processedRatio = "processed_ratio"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    /**
     * enum for parameter order
     */
    public enum Order_listProjectMeasurements: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List Project Measurements
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter uuid: (query) 計測のUUID (optional)
     - parameter name: (query) 名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)
     - parameter edgeUuid: (query) 計測に関連付けられたエッジのUUID (optional)
     - parameter start: (query) 取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter end: (query) 取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter partialMatch: (query) &#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +--------------+                                    | measurement2 |                                    +--------------+                        | measurement3 |                        +--------------+                                                         time -----------+----------------------------+------------&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)
     - parameter basetimeType: (query) 計測の基準時刻のタイプ (optional)
     - parameter ended: (query) 計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)
     - parameter since: (query) 指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter durationStart: (query) 計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)
     - parameter durationEnd: (query) 計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)
     - parameter status: (query) 計測のステータス (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)
     - parameter sort: (query) 並べ替えに使用するキー (optional, default to .baseTime)
     - parameter page: (query) 取得するページの番号 (optional)
     - parameter order: (query) 並べ替えの順序 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listProjectMeasurements(projectUuid: String, uuid: [String]? = nil, name: String? = nil, edgeUuid: String? = nil, start: String? = nil, end: String? = nil, partialMatch: Bool? = nil, basetimeType: BasetimeType_listProjectMeasurements? = nil, ended: Bool? = nil, since: String? = nil, durationStart: Int64? = nil, durationEnd: Int64? = nil, status: [String]? = nil, limit: Int? = nil, sort: Sort_listProjectMeasurements? = nil, page: Int? = nil, order: Order_listProjectMeasurements? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Measurements?, _ error: Error?) -> Void)) {
        listProjectMeasurementsWithRequestBuilder(projectUuid: projectUuid, uuid: uuid, name: name, edgeUuid: edgeUuid, start: start, end: end, partialMatch: partialMatch, basetimeType: basetimeType, ended: ended, since: since, durationStart: durationStart, durationEnd: durationEnd, status: status, limit: limit, sort: sort, page: page, order: order).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List Project Measurements
     - GET /v1/projects/{project_uuid}/measurements
     - 計測のリストを取得します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter uuid: (query) 計測のUUID (optional)
     - parameter name: (query) 名前が指定した文字列から始まる計測を取得します。 文字列をダブルクォーテーションで囲むと、完全一致のものだけが取得されます。 (optional)
     - parameter edgeUuid: (query) 計測に関連付けられたエッジのUUID (optional)
     - parameter start: (query) 取得対象範囲の始点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter end: (query) 取得対象範囲の終点。以下のいずれかの形式で指定します。   - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter partialMatch: (query) &#x60;true&#x60; にすると、計測の一部が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;false&#x60; にすると、計測の基準時刻（計測開始）が取得対象範囲に入っていればその計測は取得対象となります。 &#x60;&#x60;&#x60;    | measurement1 |    +--------------+                                    | measurement2 |                                    +--------------+                        | measurement3 |                        +--------------+                                                         time -----------+----------------------------+------------&gt;            |                            |           start                        end &#x60;&#x60;&#x60;  - この例では、もし &#x60;partial_match&#x60; を &#x60;true&#x60; にすると、 &#x60;measurement1&#x60; 、 &#x60;measurement2&#x60; 、 &#x60;measurement3&#x60; が取得できます。 - もし &#x60;partial_match&#x60; を &#x60;false&#x60; にすると、 &#x60;measurement2&#x60; と &#x60;measurement3&#x60; が取得できます。 (optional, default to false)
     - parameter basetimeType: (query) 計測の基準時刻のタイプ (optional)
     - parameter ended: (query) 計測が終了している（ended）かどうかを指定して計測を取得します。  エッジにおいてデータの取得が終了している場合、その計測は「終了(ended)」となります。 計測は終了(ended)していても、まだサーバーに送信されていないデータがエッジに残っている可能性があります。 * &#x60;true&#x60;: 終了した計測だけを取得します。 * &#x60;false&#x60;: 終了していない計測だけを取得します。 (optional)
     - parameter since: (query) 指定した時刻以降に更新された計測のみを取得します。  以下のいずれかの形式で指定します。    - RFC3339(例 &#x60;2019-10-29T03:04:05.341268Z&#x60; )   - UNIX時刻（マイクロ秒）(**Deprecated**) (optional)
     - parameter durationStart: (query) 計測時間の最小値（マイクロ秒）。これより短い計測は取得しません。 (optional)
     - parameter durationEnd: (query) 計測時間の最大値（マイクロ秒）。これより長い計測は取得しません。 (optional)
     - parameter status: (query) 計測のステータス (optional)
     - parameter limit: (query) 1回のリクエストで取得する件数。ただし、0を指定するとデフォルトの値が使用されます。 (optional, default to 1000)
     - parameter sort: (query) 並べ替えに使用するキー (optional, default to .baseTime)
     - parameter page: (query) 取得するページの番号 (optional)
     - parameter order: (query) 並べ替えの順序 (optional)
     - returns: RequestBuilder<Measurements> 
     */
    open class func listProjectMeasurementsWithRequestBuilder(projectUuid: String, uuid: [String]? = nil, name: String? = nil, edgeUuid: String? = nil, start: String? = nil, end: String? = nil, partialMatch: Bool? = nil, basetimeType: BasetimeType_listProjectMeasurements? = nil, ended: Bool? = nil, since: String? = nil, durationStart: Int64? = nil, durationEnd: Int64? = nil, status: [String]? = nil, limit: Int? = nil, sort: Sort_listProjectMeasurements? = nil, page: Int? = nil, order: Order_listProjectMeasurements? = nil) -> RequestBuilder<Measurements> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "uuid": uuid?.encodeToJSON(),
            "name": name?.encodeToJSON(),
            "edge_uuid": edgeUuid?.encodeToJSON(),
            "start": start?.encodeToJSON(),
            "end": end?.encodeToJSON(),
            "partial_match": partialMatch?.encodeToJSON(),
            "basetime_type": basetimeType?.encodeToJSON(),
            "ended": ended?.encodeToJSON(),
            "since": since?.encodeToJSON(),
            "duration_start": durationStart?.encodeToJSON(),
            "duration_end": durationEnd?.encodeToJSON(),
            "status": status?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "sort": sort?.encodeToJSON(),
            "page": page?.encodeToJSON(),
            "order": order?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Measurements>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Protect Measurement
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func protectMeasurement(measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        protectMeasurementWithRequestBuilder(measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Protect Measurement
     - PUT /v1/measurements/{measurement_uuid}/protected
     - 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func protectMeasurementWithRequestBuilder(measurementUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/protected"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Protect Project Measurement
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func protectProjectMeasurement(projectUuid: String, measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        protectProjectMeasurementWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Protect Project Measurement
     - PUT /v1/projects/{project_uuid}/measurements/{measurement_uuid}/protected
     - 計測を保護します。保護された計測は削除できません。 [See](#section/Protected-resources) も参照してください。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func protectProjectMeasurementWithRequestBuilder(projectUuid: String, measurementUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/protected"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Replace Measurement Sequence
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter sequencesUuid: (path) 計測シーケンスのUUID 
     - parameter measurementSequenceGroupReplace: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func replaceMeasurementSequence(measurementUuid: String, sequencesUuid: String, measurementSequenceGroupReplace: MeasurementSequenceGroupReplace? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementSequenceGroup?, _ error: Error?) -> Void)) {
        replaceMeasurementSequenceWithRequestBuilder(measurementUuid: measurementUuid, sequencesUuid: sequencesUuid, measurementSequenceGroupReplace: measurementSequenceGroupReplace).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Replace Measurement Sequence
     - PUT /v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}
     - 計測シーケンスを置換します。
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter sequencesUuid: (path) 計測シーケンスのUUID 
     - parameter measurementSequenceGroupReplace: (body)  (optional)
     - returns: RequestBuilder<MeasurementSequenceGroup> 
     */
    open class func replaceMeasurementSequenceWithRequestBuilder(measurementUuid: String, sequencesUuid: String, measurementSequenceGroupReplace: MeasurementSequenceGroupReplace? = nil) -> RequestBuilder<MeasurementSequenceGroup> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let sequencesUuidPreEscape = "\(APIHelper.mapValueToPathItem(sequencesUuid))"
        let sequencesUuidPostEscape = sequencesUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sequences_uuid}", with: sequencesUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measurementSequenceGroupReplace)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementSequenceGroup>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Replace Project Measurement Sequence
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter sequencesUuid: (path) 計測シーケンスのUUID 
     - parameter measurementSequenceGroupReplace: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func replaceProjectMeasurementSequence(projectUuid: String, measurementUuid: String, sequencesUuid: String, measurementSequenceGroupReplace: MeasurementSequenceGroupReplace? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementSequenceGroup?, _ error: Error?) -> Void)) {
        replaceProjectMeasurementSequenceWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid, sequencesUuid: sequencesUuid, measurementSequenceGroupReplace: measurementSequenceGroupReplace).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Replace Project Measurement Sequence
     - PUT /v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}
     - 計測シーケンスを置換します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter sequencesUuid: (path) 計測シーケンスのUUID 
     - parameter measurementSequenceGroupReplace: (body)  (optional)
     - returns: RequestBuilder<MeasurementSequenceGroup> 
     */
    open class func replaceProjectMeasurementSequenceWithRequestBuilder(projectUuid: String, measurementUuid: String, sequencesUuid: String, measurementSequenceGroupReplace: MeasurementSequenceGroupReplace? = nil) -> RequestBuilder<MeasurementSequenceGroup> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let sequencesUuidPreEscape = "\(APIHelper.mapValueToPathItem(sequencesUuid))"
        let sequencesUuidPostEscape = sequencesUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sequences_uuid}", with: sequencesUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measurementSequenceGroupReplace)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementSequenceGroup>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unprotect Measurement
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unprotectMeasurement(measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        unprotectMeasurementWithRequestBuilder(measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unprotect Measurement
     - DELETE /v1/measurements/{measurement_uuid}/protected
     - 計測の保護を解除します。
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func unprotectMeasurementWithRequestBuilder(measurementUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/protected"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Unprotect Project Measurement
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func unprotectProjectMeasurement(projectUuid: String, measurementUuid: String, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        unprotectProjectMeasurementWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unprotect Project Measurement
     - DELETE /v1/projects/{project_uuid}/measurements/{measurement_uuid}/protected
     - 計測の保護を解除します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - returns: RequestBuilder<Void> 
     */
    open class func unprotectProjectMeasurementWithRequestBuilder(projectUuid: String, measurementUuid: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/protected"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update Measurement
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measReplace: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMeasurement(measurementUuid: String, measReplace: MeasReplace? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        updateMeasurementWithRequestBuilder(measurementUuid: measurementUuid, measReplace: measReplace).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Measurement
     - PUT /v1/measurements/{measurement_uuid}
     - 計測に関する情報を更新します。
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measReplace: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateMeasurementWithRequestBuilder(measurementUuid: String, measReplace: MeasReplace? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measReplace)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_updateMeasurementBaseTime: String, CaseIterable {
        case edgeRtc = "edge_rtc"
        case ntp = "ntp"
        case gps = "gps"
        case apiFirstReceived = "api_first_received"
        case volatile = "volatile"
        case manual = "manual"
    }

    /**
     Replace Measurement Base Time
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter type: (path) 基準時刻のタイプ 
     - parameter measBaseTimePut: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMeasurementBaseTime(measurementUuid: String, type: ModelType_updateMeasurementBaseTime, measBaseTimePut: MeasBaseTimePut? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasBaseTime?, _ error: Error?) -> Void)) {
        updateMeasurementBaseTimeWithRequestBuilder(measurementUuid: measurementUuid, type: type, measBaseTimePut: measBaseTimePut).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Replace Measurement Base Time
     - PUT /v1/measurements/{measurement_uuid}/basetimes/{type}
     - 基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ `basetime_type` が `undefined` ）の場合は、 新しい基準時刻を `basetime_type` に設定します。
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter type: (path) 基準時刻のタイプ 
     - parameter measBaseTimePut: (body)  (optional)
     - returns: RequestBuilder<MeasBaseTime> 
     */
    open class func updateMeasurementBaseTimeWithRequestBuilder(measurementUuid: String, type: ModelType_updateMeasurementBaseTime, measBaseTimePut: MeasBaseTimePut? = nil) -> RequestBuilder<MeasBaseTime> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/basetimes/{type}"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measBaseTimePut)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasBaseTime>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update Measurement Sequence
     
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter sequencesUuid: (path) 計測シーケンスのUUID 
     - parameter measurementSequenceGroupReplace: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateMeasurementSequence(measurementUuid: String, sequencesUuid: String, measurementSequenceGroupReplace: MeasurementSequenceGroupReplace? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementSequenceGroup?, _ error: Error?) -> Void)) {
        updateMeasurementSequenceWithRequestBuilder(measurementUuid: measurementUuid, sequencesUuid: sequencesUuid, measurementSequenceGroupReplace: measurementSequenceGroupReplace).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Measurement Sequence
     - PATCH /v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}
     - 計測シーケンスを更新します。
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter sequencesUuid: (path) 計測シーケンスのUUID 
     - parameter measurementSequenceGroupReplace: (body)  (optional)
     - returns: RequestBuilder<MeasurementSequenceGroup> 
     */
    open class func updateMeasurementSequenceWithRequestBuilder(measurementUuid: String, sequencesUuid: String, measurementSequenceGroupReplace: MeasurementSequenceGroupReplace? = nil) -> RequestBuilder<MeasurementSequenceGroup> {
        var localVariablePath = "/v1/measurements/{measurement_uuid}/sequences/{sequences_uuid}"
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let sequencesUuidPreEscape = "\(APIHelper.mapValueToPathItem(sequencesUuid))"
        let sequencesUuidPostEscape = sequencesUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sequences_uuid}", with: sequencesUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measurementSequenceGroupReplace)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementSequenceGroup>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update Project Measurement
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measReplace: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProjectMeasurement(projectUuid: String, measurementUuid: String, measReplace: MeasReplace? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        updateProjectMeasurementWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid, measReplace: measReplace).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Project Measurement
     - PUT /v1/projects/{project_uuid}/measurements/{measurement_uuid}
     - 計測に関する情報を更新します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter measReplace: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func updateProjectMeasurementWithRequestBuilder(projectUuid: String, measurementUuid: String, measReplace: MeasReplace? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measReplace)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = intdashAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_updateProjectMeasurementBaseTime: String, CaseIterable {
        case edgeRtc = "edge_rtc"
        case ntp = "ntp"
        case gps = "gps"
        case apiFirstReceived = "api_first_received"
        case volatile = "volatile"
        case manual = "manual"
    }

    /**
     Replace Project Measurement Base Time
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter type: (path) 基準時刻のタイプ 
     - parameter measBaseTimePut: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProjectMeasurementBaseTime(projectUuid: String, measurementUuid: String, type: ModelType_updateProjectMeasurementBaseTime, measBaseTimePut: MeasBaseTimePut? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasBaseTime?, _ error: Error?) -> Void)) {
        updateProjectMeasurementBaseTimeWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid, type: type, measBaseTimePut: measBaseTimePut).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Replace Project Measurement Base Time
     - PUT /v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}
     - 基準時刻を更新します。 この計測において、使用する基準時刻が設定されていない（ `basetime_type` が `undefined` ）の場合は、 新しい基準時刻を `basetime_type` に設定します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter type: (path) 基準時刻のタイプ 
     - parameter measBaseTimePut: (body)  (optional)
     - returns: RequestBuilder<MeasBaseTime> 
     */
    open class func updateProjectMeasurementBaseTimeWithRequestBuilder(projectUuid: String, measurementUuid: String, type: ModelType_updateProjectMeasurementBaseTime, measBaseTimePut: MeasBaseTimePut? = nil) -> RequestBuilder<MeasBaseTime> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/basetimes/{type}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let typePreEscape = "\(type.rawValue)"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measBaseTimePut)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasBaseTime>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update Project Measurement Sequence
     
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter sequencesUuid: (path) 計測シーケンスのUUID 
     - parameter measurementSequenceGroupReplace: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProjectMeasurementSequence(projectUuid: String, measurementUuid: String, sequencesUuid: String, measurementSequenceGroupReplace: MeasurementSequenceGroupReplace? = nil, apiResponseQueue: DispatchQueue = intdashAPI.apiResponseQueue, completion: @escaping ((_ data: MeasurementSequenceGroup?, _ error: Error?) -> Void)) {
        updateProjectMeasurementSequenceWithRequestBuilder(projectUuid: projectUuid, measurementUuid: measurementUuid, sequencesUuid: sequencesUuid, measurementSequenceGroupReplace: measurementSequenceGroupReplace).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Project Measurement Sequence
     - PATCH /v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}
     - 計測シーケンスを更新します。
     - parameter projectUuid: (path) プロジェクトのUUID 
     - parameter measurementUuid: (path) 計測のUUID 
     - parameter sequencesUuid: (path) 計測シーケンスのUUID 
     - parameter measurementSequenceGroupReplace: (body)  (optional)
     - returns: RequestBuilder<MeasurementSequenceGroup> 
     */
    open class func updateProjectMeasurementSequenceWithRequestBuilder(projectUuid: String, measurementUuid: String, sequencesUuid: String, measurementSequenceGroupReplace: MeasurementSequenceGroupReplace? = nil) -> RequestBuilder<MeasurementSequenceGroup> {
        var localVariablePath = "/v1/projects/{project_uuid}/measurements/{measurement_uuid}/sequences/{sequences_uuid}"
        let projectUuidPreEscape = "\(APIHelper.mapValueToPathItem(projectUuid))"
        let projectUuidPostEscape = projectUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_uuid}", with: projectUuidPostEscape, options: .literal, range: nil)
        let measurementUuidPreEscape = "\(APIHelper.mapValueToPathItem(measurementUuid))"
        let measurementUuidPostEscape = measurementUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{measurement_uuid}", with: measurementUuidPostEscape, options: .literal, range: nil)
        let sequencesUuidPreEscape = "\(APIHelper.mapValueToPathItem(sequencesUuid))"
        let sequencesUuidPostEscape = sequencesUuidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{sequences_uuid}", with: sequencesUuidPostEscape, options: .literal, range: nil)
        let localVariableURLString = intdashAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: measurementSequenceGroupReplace)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<MeasurementSequenceGroup>.Type = intdashAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
