//
// UserPassword.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserPassword: Codable {

    /** ログイン失敗回数。ログインに成功すると0にリセットされます。 */
    public var attemptCount: Int64
    /** `true` の場合、このユーザーのパスワードは一時パスワードです。 */
    public var isTemporary: Bool
    /** 一時パスワード */
    public var temporaryPassword: String?
    /** 最終ログイン試行日時 */
    public var lastAttemptAt: Date
    /** パスワードの有効期限 */
    public var expiredAt: Date?
    /** 作成日時 */
    public var createdAt: Date
    /** 最終更新日時 */
    public var updatedAt: Date

    public init(attemptCount: Int64, isTemporary: Bool, temporaryPassword: String? = nil, lastAttemptAt: Date, expiredAt: Date? = nil, createdAt: Date, updatedAt: Date) {
        self.attemptCount = attemptCount
        self.isTemporary = isTemporary
        self.temporaryPassword = temporaryPassword
        self.lastAttemptAt = lastAttemptAt
        self.expiredAt = expiredAt
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case attemptCount = "attempt_count"
        case isTemporary = "is_temporary"
        case temporaryPassword = "temporary_password"
        case lastAttemptAt = "last_attempt_at"
        case expiredAt = "expired_at"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(attemptCount, forKey: .attemptCount)
        try container.encode(isTemporary, forKey: .isTemporary)
        try container.encodeIfPresent(temporaryPassword, forKey: .temporaryPassword)
        try container.encode(lastAttemptAt, forKey: .lastAttemptAt)
        try container.encodeIfPresent(expiredAt, forKey: .expiredAt)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

