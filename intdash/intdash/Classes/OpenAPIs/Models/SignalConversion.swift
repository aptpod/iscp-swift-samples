//
// SignalConversion.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public enum SignalConversion: Codable {
    case typeSignalConversionCSV(SignalConversionCSV)
    case typeSignalConversionJSON(SignalConversionJSON)
    case typeSignalConversionNumFixedPoint(SignalConversionNumFixedPoint)
    case typeSignalConversionNumFloatingPoint(SignalConversionNumFloatingPoint)
    case typeSignalConversionSubBytes(SignalConversionSubBytes)
    case typeSignalConversionSubString(SignalConversionSubString)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case .typeSignalConversionCSV(let value):
            try container.encode(value)
        case .typeSignalConversionJSON(let value):
            try container.encode(value)
        case .typeSignalConversionNumFixedPoint(let value):
            try container.encode(value)
        case .typeSignalConversionNumFloatingPoint(let value):
            try container.encode(value)
        case .typeSignalConversionSubBytes(let value):
            try container.encode(value)
        case .typeSignalConversionSubString(let value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(SignalConversionCSV.self) {
            self = .typeSignalConversionCSV(value)
        } else if let value = try? container.decode(SignalConversionJSON.self) {
            self = .typeSignalConversionJSON(value)
        } else if let value = try? container.decode(SignalConversionNumFixedPoint.self) {
            self = .typeSignalConversionNumFixedPoint(value)
        } else if let value = try? container.decode(SignalConversionNumFloatingPoint.self) {
            self = .typeSignalConversionNumFloatingPoint(value)
        } else if let value = try? container.decode(SignalConversionSubBytes.self) {
            self = .typeSignalConversionSubBytes(value)
        } else if let value = try? container.decode(SignalConversionSubString.self) {
            self = .typeSignalConversionSubString(value)
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of SignalConversion"))
        }
    }
}

