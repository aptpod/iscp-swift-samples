//
// MeasurementMarkerBase.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MeasurementMarkerBase: Codable {

    public enum ModelType: String, Codable, CaseIterable {
        case point = "point"
        case range = "range"
    }
    /** 計測マーカーのUUID */
    public var uuid: String
    /** 計測マーカーの名前 */
    public var name: String
    /** 計測マーカーの説明 */
    public var description: String
    /** 計測マーカーのタイプ - `point` : ポイントマーカー - `range` : 範囲マーカー */
    public var type: ModelType
    /** 計測マーカーに付与されたタグ */
    public var tag: AnyCodable
    /** 計測マーカーの作成日時 */
    public var createdAt: String
    /** 計測マーカー作成者 */
    public var createdBy: String
    /** 計測マーカーの最終更新日時 */
    public var updatedAt: String
    /** 計測マーカーの最終更新者 */
    public var updatedBy: String

    public init(uuid: String, name: String, description: String, type: ModelType, tag: AnyCodable, createdAt: String, createdBy: String, updatedAt: String, updatedBy: String) {
        self.uuid = uuid
        self.name = name
        self.description = description
        self.type = type
        self.tag = tag
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.updatedAt = updatedAt
        self.updatedBy = updatedBy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case name
        case description
        case type
        case tag
        case createdAt = "created_at"
        case createdBy = "created_by"
        case updatedAt = "updated_at"
        case updatedBy = "updated_by"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encode(type, forKey: .type)
        try container.encode(tag, forKey: .tag)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(updatedBy, forKey: .updatedBy)
    }
}

