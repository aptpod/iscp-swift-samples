//
// EdgeConnectionEdge.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EdgeConnectionEdge: Codable {

    public enum ModelType: String, Codable, CaseIterable {
        case user = "user"
        case device = "device"
    }
    /** エッジのUUID */
    public var uuid: String
    /** エッジの名前 */
    public var name: String
    /** エッジの表示名 */
    public var nickname: String
    /** エッジの説明 */
    public var description: String
    /** * `true` : このエッジは無効化されています。 * `false` : このエッジは有効です。 */
    public var disabled: Bool
    /** * `true` : このエッジは内部エッジ（システム内部で使用される特別なエッジ）です。   このエッジの変更や削除はできません。 * `false` : このエッジは内部エッジではありません。 */
    public var _internal: Bool
    /** * `true` : このエッジは保護されています。このエッジの変更や削除はできません。 * `false` : このエッジは保護されていません。 */
    public var protected: Bool
    /** エッジのタイプ */
    public var type: ModelType
    /** エッジが最後にログインした日時 */
    public var lastLoginAt: String
    /** サーバーがこのエッジ接続を確認できた最後の日時。 エッジとサーバーがWebSocketで接続されている間、この値は数秒おきに最新の日時に更新されます。 WebSocketが切断されると、それ以上更新されなくなります。 更新は数秒おきであるため、WebSocketが切断された場合に その切断の時刻が正確に記録されるわけではありません。 */
    public var lastLivedAt: String
    /** エッジが作成された日時 */
    public var createdAt: String
    /** エッジの最終更新日時 */
    public var updatedAt: String

    public init(uuid: String, name: String, nickname: String, description: String, disabled: Bool, _internal: Bool, protected: Bool, type: ModelType, lastLoginAt: String, lastLivedAt: String, createdAt: String, updatedAt: String) {
        self.uuid = uuid
        self.name = name
        self.nickname = nickname
        self.description = description
        self.disabled = disabled
        self._internal = _internal
        self.protected = protected
        self.type = type
        self.lastLoginAt = lastLoginAt
        self.lastLivedAt = lastLivedAt
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case name
        case nickname
        case description
        case disabled
        case _internal = "internal"
        case protected
        case type
        case lastLoginAt = "last_login_at"
        case lastLivedAt = "last_lived_at"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(name, forKey: .name)
        try container.encode(nickname, forKey: .nickname)
        try container.encode(description, forKey: .description)
        try container.encode(disabled, forKey: .disabled)
        try container.encode(_internal, forKey: ._internal)
        try container.encode(protected, forKey: .protected)
        try container.encode(type, forKey: .type)
        try container.encode(lastLoginAt, forKey: .lastLoginAt)
        try container.encode(lastLivedAt, forKey: .lastLivedAt)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

