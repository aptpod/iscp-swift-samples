//
// MeasurementJob.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MeasurementJob: Codable {

    /** ジョブのUUID */
    public var uuid: String
    /** 計測のUUID */
    @available(*, deprecated, message: "This property is deprecated.")
    public var measUuid: String
    public var measurement: Measurement
    public var status: MeasurementJobStatus
    /** ジョブの結果を表すメッセージ。 ジョブのステータスが `failed` の場合、メッセージが以下の形式で表示されます。  `<row_number>:<column_number>:<column_name>:<cell_value>:<error_message>`  行番号や列番号が不明の場合は `0` が出力されます。 * ex.1 `2:1:time:1539263580:A time must be after the base_time\\: BaseTime=2018-10-11 13\\:13\\:03 +0000 UTC` * ex.2 `4:0:::Wrong number of fields` * ex.3 `0:0:::Unexpected Error`  `:` と `\\` はエスケープされ、 `\\:` と `\\\\` として出力されます。 */
    public var message: String
    /** ジョブの対象のファイル名。 同じ日に同じ名前のファイルがアップロードされた場合は、ランダムな接頭辞が付与されます。 */
    public var fileName: String
    /** ジョブの作成日時 */
    public var createdAt: String
    /** ジョブの最終更新日時 */
    public var updatedAt: String

    public init(uuid: String, measUuid: String, measurement: Measurement, status: MeasurementJobStatus, message: String, fileName: String, createdAt: String, updatedAt: String) {
        self.uuid = uuid
        self.measUuid = measUuid
        self.measurement = measurement
        self.status = status
        self.message = message
        self.fileName = fileName
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case measUuid = "meas_uuid"
        case measurement
        case status
        case message
        case fileName = "file_name"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(measUuid, forKey: .measUuid)
        try container.encode(measurement, forKey: .measurement)
        try container.encode(status, forKey: .status)
        try container.encode(message, forKey: .message)
        try container.encode(fileName, forKey: .fileName)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

