//
// HLS.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct HLS: Codable {

    /** エッジのUUID */
    public var edgeUuid: String
    /** 計測のUUID */
    public var measurementUuid: String
    /** 基準時刻 */
    public var basetime: String
    /** 基準時刻タイプ */
    public var basetimeType: String
    /** プレイリスト */
    public var playlist: String
    /** チャンネル */
    public var channel: Int
    /** 計測開始から動画の開始までのオフセット（マイクロ秒） */
    public var offsetTime: Int
    /** 長さ（マイクロ秒） */
    public var duration: Int

    public init(edgeUuid: String, measurementUuid: String, basetime: String, basetimeType: String, playlist: String, channel: Int, offsetTime: Int, duration: Int) {
        self.edgeUuid = edgeUuid
        self.measurementUuid = measurementUuid
        self.basetime = basetime
        self.basetimeType = basetimeType
        self.playlist = playlist
        self.channel = channel
        self.offsetTime = offsetTime
        self.duration = duration
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case edgeUuid = "edge_uuid"
        case measurementUuid = "measurement_uuid"
        case basetime
        case basetimeType = "basetime_type"
        case playlist
        case channel
        case offsetTime = "offset_time"
        case duration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(edgeUuid, forKey: .edgeUuid)
        try container.encode(measurementUuid, forKey: .measurementUuid)
        try container.encode(basetime, forKey: .basetime)
        try container.encode(basetimeType, forKey: .basetimeType)
        try container.encode(playlist, forKey: .playlist)
        try container.encode(channel, forKey: .channel)
        try container.encode(offsetTime, forKey: .offsetTime)
        try container.encode(duration, forKey: .duration)
    }
}

