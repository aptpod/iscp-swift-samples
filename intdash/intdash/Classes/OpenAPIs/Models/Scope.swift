//
// Scope.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Scope: Codable {

    /** スコープのUUID */
    public var uuid: String
    /** スコープの名前 */
    public var name: String
    /** 許可されているエンドポイント */
    public var allowedEndpoints: [AllowedEndpoint]
    /** 許可されているiSCPメッセージ */
    public var allowedIscpMessages: [AllowedISCPMessage]
    /** 拒否されているエンドポイント */
    public var deniedEndpoints: [DeniedEndpoint]
    /** 作成日時 */
    public var createdAt: Date
    /** 最終更新日時 */
    public var updatedAt: Date

    public init(uuid: String, name: String, allowedEndpoints: [AllowedEndpoint], allowedIscpMessages: [AllowedISCPMessage], deniedEndpoints: [DeniedEndpoint], createdAt: Date, updatedAt: Date) {
        self.uuid = uuid
        self.name = name
        self.allowedEndpoints = allowedEndpoints
        self.allowedIscpMessages = allowedIscpMessages
        self.deniedEndpoints = deniedEndpoints
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case name
        case allowedEndpoints = "allowed_endpoints"
        case allowedIscpMessages = "allowed_iscp_messages"
        case deniedEndpoints = "denied_endpoints"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(name, forKey: .name)
        try container.encode(allowedEndpoints, forKey: .allowedEndpoints)
        try container.encode(allowedIscpMessages, forKey: .allowedIscpMessages)
        try container.encode(deniedEndpoints, forKey: .deniedEndpoints)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

