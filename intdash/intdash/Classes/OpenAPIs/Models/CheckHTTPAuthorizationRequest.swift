//
// CheckHTTPAuthorizationRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** アクセス制御可能かどうかを判定します。 ###  サブジェクト指定なしの場合 リクエストのスコープのみでアクセス判定を行います。 ###  サブジェクト指定ありの場合 パスを分類し、分類した結果によって処理が変わります。 ####  パスがプロジェクトコンテキストの場合 サブジェクトがプロジェクトに所属しているかを確認し、所属している場合は、サブジェクトがメンバーの場合そのプロジェクトにおけるスコープからアクセス判定を行います。サブジェクトがエッジの場合はリクエストのスコープからアクセス判定を行います。  ###  パスがグループコンテキストの場合 サブジェクトがプロジェクトに所属しているかを確認し、所属している場合は、そのプロジェクトにおけるスコープからアクセス判定を行います。 ###  パスがその他の場合 リクエストのスコープからアクセス判定を行います。 */
public struct CheckHTTPAuthorizationRequest: Codable {

    public enum Method: String, Codable, CaseIterable {
        case _get = "GET"
        case post = "POST"
        case put = "PUT"
        case patch = "PATCH"
        case delete = "DELETE"
    }
    /** 認証主体を指定します。通常アクセスユーザーのUUIDかアクセスエッジのUUIDを指定します。 */
    public var subject: String?
    /** スコープを指定します。前述の説明を参照ください。 */
    public var scopes: [String]
    public var path: String
    public var method: Method

    public init(subject: String? = nil, scopes: [String], path: String, method: Method) {
        self.subject = subject
        self.scopes = scopes
        self.path = path
        self.method = method
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case subject
        case scopes
        case path
        case method
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(subject, forKey: .subject)
        try container.encode(scopes, forKey: .scopes)
        try container.encode(path, forKey: .path)
        try container.encode(method, forKey: .method)
    }
}

