//
// Member.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Member: Codable {

    /** メンバーのユーザーUUID */
    public var userUuid: String
    /** メンバーの名前 */
    public var name: String
    public var emails: [UserEmail]
    /** 親グループから継承されたメンバーのロールUUID */
    public var inheritedRoleUuids: [String]
    /** メンバーのロールUUID */
    public var roleUuids: [String]
    /** `true` の場合、このメンバーはオーナーです。 */
    public var isOwner: Bool
    /** 作成日時 */
    public var createdAt: Date
    /** 最終更新日時 */
    public var updatedAt: Date

    public init(userUuid: String, name: String, emails: [UserEmail], inheritedRoleUuids: [String], roleUuids: [String], isOwner: Bool, createdAt: Date, updatedAt: Date) {
        self.userUuid = userUuid
        self.name = name
        self.emails = emails
        self.inheritedRoleUuids = inheritedRoleUuids
        self.roleUuids = roleUuids
        self.isOwner = isOwner
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userUuid = "user_uuid"
        case name
        case emails
        case inheritedRoleUuids = "inherited_role_uuids"
        case roleUuids = "role_uuids"
        case isOwner = "is_owner"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(userUuid, forKey: .userUuid)
        try container.encode(name, forKey: .name)
        try container.encode(emails, forKey: .emails)
        try container.encode(inheritedRoleUuids, forKey: .inheritedRoleUuids)
        try container.encode(roleUuids, forKey: .roleUuids)
        try container.encode(isOwner, forKey: .isOwner)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

