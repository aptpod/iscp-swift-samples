//
// CreateOAuth2ClientAuthorizationCodeRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateOAuth2ClientAuthorizationCodeRequest: Codable {

    public enum GrantType: String, Codable, CaseIterable {
        case authorizationCode = "authorization_code"
        case clientCredentials = "client_credentials"
    }
    public enum TokenEndpointAuthMethod: String, Codable, CaseIterable {
        case clientSecretPost = "client_secret_post"
        case tlsClientAuth = "tls_client_auth"
    }
    /** 名前 */
    public var name: String
    /** グラントタイプ */
    public var grantType: GrantType
    public var redirectUris: [String]
    /** トークンエンドポイントの認証方式 */
    public var tokenEndpointAuthMethod: TokenEndpointAuthMethod = .clientSecretPost
    /** TLSクライアント認証のサブジェクトDN */
    public var tlsClientAuthSubjectDn: String?

    public init(name: String, grantType: GrantType, redirectUris: [String], tokenEndpointAuthMethod: TokenEndpointAuthMethod = .clientSecretPost, tlsClientAuthSubjectDn: String? = nil) {
        self.name = name
        self.grantType = grantType
        self.redirectUris = redirectUris
        self.tokenEndpointAuthMethod = tokenEndpointAuthMethod
        self.tlsClientAuthSubjectDn = tlsClientAuthSubjectDn
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case grantType = "grant_type"
        case redirectUris = "redirect_uris"
        case tokenEndpointAuthMethod = "token_endpoint_auth_method"
        case tlsClientAuthSubjectDn = "tls_client_auth_subject_dn"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(grantType, forKey: .grantType)
        try container.encode(redirectUris, forKey: .redirectUris)
        try container.encode(tokenEndpointAuthMethod, forKey: .tokenEndpointAuthMethod)
        try container.encodeIfPresent(tlsClientAuthSubjectDn, forKey: .tlsClientAuthSubjectDn)
    }
}

