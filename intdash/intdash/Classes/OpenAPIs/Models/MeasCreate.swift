//
// MeasCreate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MeasCreate: Codable {

    /** 計測の名前 */
    public var name: String?
    /** 計測の説明 */
    public var description: String?
    /** 計測の基準時刻（計測が開始された時刻） */
    public var basetime: Date
    public var basetimeType: MeasurementBaseTimeType
    /** この計測に関連付けられたエッジのUUID */
    public var edgeUuid: String
    /** `true` の場合、計測は保護されます。保護されている計測は削除できません。 */
    @available(*, deprecated, message: "This property is deprecated.")
    public var protected: Bool

    public init(name: String? = nil, description: String? = nil, basetime: Date, basetimeType: MeasurementBaseTimeType, edgeUuid: String, protected: Bool) {
        self.name = name
        self.description = description
        self.basetime = basetime
        self.basetimeType = basetimeType
        self.edgeUuid = edgeUuid
        self.protected = protected
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case basetime
        case basetimeType = "basetime_type"
        case edgeUuid = "edge_uuid"
        case protected
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(basetime, forKey: .basetime)
        try container.encode(basetimeType, forKey: .basetimeType)
        try container.encode(edgeUuid, forKey: .edgeUuid)
        try container.encode(protected, forKey: .protected)
    }
}

