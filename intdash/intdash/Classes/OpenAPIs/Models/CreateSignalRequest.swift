//
// CreateSignalRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateSignalRequest: Codable {

    /** チャンネル */
    public var channel: Int?
    public var conversion: SignalConversion?
    /** データID */
    public var dataId: String?
    /** データタイプ */
    public var dataType: Int?
    /** 信号定義の説明 */
    public var description: String?
    public var display: SignalDisplay?
    /** 信号定義のラベル */
    public var label: String?
    /** 信号定義のUUID */
    public var uuid: String?

    public init(channel: Int? = nil, conversion: SignalConversion? = nil, dataId: String? = nil, dataType: Int? = nil, description: String? = nil, display: SignalDisplay? = nil, label: String? = nil, uuid: String? = nil) {
        self.channel = channel
        self.conversion = conversion
        self.dataId = dataId
        self.dataType = dataType
        self.description = description
        self.display = display
        self.label = label
        self.uuid = uuid
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case channel
        case conversion
        case dataId = "data_id"
        case dataType = "data_type"
        case description
        case display
        case label
        case uuid
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(channel, forKey: .channel)
        try container.encodeIfPresent(conversion, forKey: .conversion)
        try container.encodeIfPresent(dataId, forKey: .dataId)
        try container.encodeIfPresent(dataType, forKey: .dataType)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(display, forKey: .display)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(uuid, forKey: .uuid)
    }
}

