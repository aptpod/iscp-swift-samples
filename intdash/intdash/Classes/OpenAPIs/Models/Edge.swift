//
// Edge.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Edge: Codable {

    /** エッジのUUID */
    public var uuid: String
    /** エッジの名前 */
    public var name: String
    /** エッジの表示名 */
    public var nickname: String
    /** エッジの説明 */
    public var description: String
    public var owner: EdgeOwner?
    /** 作成日時 */
    public var createdAt: Date
    /** 最終更新日時 */
    public var updatedAt: Date
    /** エッジのクライアントシークレット */
    public var clientSecret: String?

    public init(uuid: String, name: String, nickname: String, description: String, owner: EdgeOwner? = nil, createdAt: Date, updatedAt: Date, clientSecret: String? = nil) {
        self.uuid = uuid
        self.name = name
        self.nickname = nickname
        self.description = description
        self.owner = owner
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.clientSecret = clientSecret
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uuid
        case name
        case nickname
        case description
        case owner
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case clientSecret = "client_secret"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(uuid, forKey: .uuid)
        try container.encode(name, forKey: .name)
        try container.encode(nickname, forKey: .nickname)
        try container.encode(description, forKey: .description)
        try container.encodeIfPresent(owner, forKey: .owner)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(clientSecret, forKey: .clientSecret)
    }
}

