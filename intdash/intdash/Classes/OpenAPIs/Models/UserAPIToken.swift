//
// UserAPIToken.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserAPIToken: Codable {

    /** APIトークンのID */
    public var id: Int64
    /** APIトークンの名前 */
    public var name: String
    /** APIトークン */
    public var token: String?
    /** スコープ */
    public var scopes: [Scope]
    /** 最後に使用された日時 */
    public var lastUsedAt: Date
    /** 有効期限 */
    public var expiredAt: Date
    /** 作成日時 */
    public var createdAt: Date
    /** 最終更新日時 */
    public var updatedAt: Date

    public init(id: Int64, name: String, token: String? = nil, scopes: [Scope], lastUsedAt: Date, expiredAt: Date, createdAt: Date, updatedAt: Date) {
        self.id = id
        self.name = name
        self.token = token
        self.scopes = scopes
        self.lastUsedAt = lastUsedAt
        self.expiredAt = expiredAt
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case token
        case scopes
        case lastUsedAt = "last_used_at"
        case expiredAt = "expired_at"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(token, forKey: .token)
        try container.encode(scopes, forKey: .scopes)
        try container.encode(lastUsedAt, forKey: .lastUsedAt)
        try container.encode(expiredAt, forKey: .expiredAt)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

